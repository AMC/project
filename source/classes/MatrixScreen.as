package classes{	import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.Font;	import flash.text.TextFormatAlign;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.utils.getTimer;	import flash.net.URLLoader;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.filters.GlowFilter;		public class MatrixScreen extends GameObject 	{		private var bid:int = 1;				private var profileIndexes:Array;				private var board:GameObject;		private var bidPlate:GameObject;		private var bidText:TextObject;		private var bidTextFormat:TextFormat;				private var minus1:Button;		private var minus5:Button;		private var minus10:Button;		private var minus25:Button;		private var plus1:Button;		private var plus5:Button;		private var plus10:Button;		private var plus25:Button;		private var reset:Button;		private var playBtn:Button;				private var backBtn:Button;				private var boardObjects:Array;				private var playStartTime:int;		private var net:URLLoader;				private var rollID:String;		private var rollResult:String;				private var isPlayDone:Boolean = false;		private var isLoadDone:Boolean = false;				private var minigamePanel:MinigameSelector;				public function MatrixScreen()		{			boardObjects = new Array();			profileIndexes = new Array();						Font.registerFont(Impact);						bidPlate = Game.GetClass("BidPlate") as GameObject;			board = Game.GetClass("MatrixBoard") as GameObject;			minus1 = new Button(Button.MINUS1);			minus5 = new Button(Button.MINUS5);			minus10 = new Button(Button.MINUS10);			minus25 = new Button(Button.MINUS25);			plus1 = new Button(Button.PLUS1);			plus5 = new Button(Button.PLUS5);			plus10 = new Button(Button.PLUS10);			plus25 = new Button(Button.PLUS25);			reset = new Button(Button.RESET);			playBtn = new Button(Button.PLAY);			backBtn = new Button(Button.BACK_ARROW);			bidText = new TextObject();			bidTextFormat = new TextFormat("Impact",48,0xFFFFFF,null,null,null,null,null, TextFormatAlign.CENTER);						addChild(playBtn);			addChild(bidPlate);			addChild(board);			addChild(minus1);			addChild(minus5);			addChild(minus10);			addChild(minus25);			addChild(plus1);			addChild(plus5);			addChild(plus10);			addChild(plus25);			addChild(reset);			addChild(bidText);			addChild(backBtn);						playBtn.SetOnClick(onPlay);			reset.SetOnClick(onReset);			minus1.SetOnClick(onMinus1);			minus5.SetOnClick(onMinus5);			minus10.SetOnClick(onMinus10);			minus25.SetOnClick(onMinus25);			plus1.SetOnClick(onPlus1);			plus5.SetOnClick(onPlus5);			plus10.SetOnClick(onPlus10);			plus25.SetOnClick(onPlus25);						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event)		{			isPlayDone = true;			// Reset our bid @ 10			setBid(10);						// Disable our buttons until profiles are loaded ...			disableButtons();						// Load our profile data...			profileIndexes = [];			profileIndexes[0] = 0;			profileIndexes[1] = int(Math.random()*(Game.Profiles.length-2))+1;						for (var n:int = 0; n < profileIndexes.length; n++)			{				Game.Profiles.Get(profileIndexes[n]).LoadProfile();			}						// Put things at random positions to be "flown" in...			var p:Point = new Point(360,310);						playBtn.setPosition(508, 390);			board.setPosition(1, 75); board.alpha = 0.0;			bidPlate.setRandomPosition();			reset.setRandomPosition();			minus1.setRandomPosition();			minus5.setRandomPosition();			minus10.setRandomPosition();			minus25.setRandomPosition();			plus1.setRandomPosition();			plus5.setRandomPosition();			plus10.setRandomPosition();			plus25.setRandomPosition();			backBtn.setRandomPosition();			backBtn.scaleX = backBtn.scaleY = 0.5;						bidText.setText(String(bid));			bidText.setTextFormat(bidTextFormat);			bidText.setRectangle(572,306-bidText.getTextHeight()/2,88,(bidTextFormat.size as Number)*1.5);						bidPlate.moveTo(508,215,500);			reset.moveTo(516,248,500);			minus1.moveTo(541,248,500);			minus5.moveTo(541,280,500);			minus10.moveTo(541,312,500);			minus25.moveTo(541,344,500);			plus1.moveTo(668,248,500);			plus5.moveTo(668,280,500);			plus10.moveTo(668,312,500);			plus25.moveTo(668,344,500);			backBtn.moveTo(4,530,500);			board.fadeTo(1.0, 500);			bidText.fadeTo(1.0, 500, null, 500);						var timer:Timer = new Timer(20,0);			timer.addEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);			timer.start();		}		private function loadNewProfiles()		{			profileIndexes[0] = 0;			profileIndexes[1] = int(Math.random()*(Game.Profiles.length-2))+1;						for (var n:int = 0; n < profileIndexes.length; n++) 				Game.Profiles.Get(profileIndexes[n]).LoadProfile();						var timer:Timer = new Timer(20,0);			timer.addEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);			timer.start();		}		private function onCheckForProfilesLoaded(e:Event)		{			var b:Boolean = true;						for (var n:int = 0; n < profileIndexes.length; n++)			{				var profile:ProfileNode = Game.Profiles.Get(profileIndexes[n]);				if (profile.isLoaded == false) { b = false; profile.LoadProfile(); }								if (profile.isLoaded == true && profile.isDefault == true)				{					b = false;										Game.Message("Found a default profile image ... finding a new friend!");										var found:Boolean = true;					while (found)					{						found = false;												var pI:int = int(Math.random()*(Game.Profiles.length-2))+1												for (var t:int = 1; t < profileIndexes.length; t++)							if (profileIndexes[t] == pI)								found = true;														if (!found)						{							profileIndexes[n] = pI;							Game.Profiles.Get(pI).LoadProfile();						}					}				}			}			if (b)			{				e.target.stop();				e.target.removeEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);				e = null;				isLoadDone = true;				if (isPlayDone) enableButtons();			}		}		public function SetBackCallback(f:Function)		{			backBtn.SetOnClick(f);		}		private function killMe(o:GameObject)		{			if (contains(o)) removeChild(o);			o.Destroy();			o = null;		}		public function Shatter(callback:Function)		{			if (boardObjects.length > 0)			{				for (var n:int = 0; n < boardObjects.length; n++)				{					(boardObjects[n] as GameObject).moveTo(0,-400,300,killMe);				}				boardObjects = [];			}						bidText.fadeTo(0,300);			playBtn.moveTo(260,300,300);			bidPlate.moveTo(900, -100, 500);			board.fadeTo(0,500);			reset.moveTo(-100, 900, 500);			minus1.moveTo(900, 900, 500);			minus5.moveTo(-100, -100, 500);			minus10.moveTo(900, -100, 500);			minus25.moveTo(-100, 900, 500);			plus1.moveTo(900, 900, 500);			plus5.moveTo(-100, -100, 500);			plus10.moveTo(900, -100, 500);			plus25.moveTo(-100, 900, 500, callback);		}		private function onPlay()		{			isPlayDone = false;			isLoadDone = false;						if (Game.GetVirtualCoins() < bid)			{				MessageBox.Okay("Insufficient funds to play.");				return;			}			Game.SetVirtualCoins(Game.GetVirtualCoins() - bid);						disableButtons();			if (boardObjects.length > 0)			{				for (var n:int = 0; n < boardObjects.length; n++)				{					(boardObjects[n] as GameObject).moveTo(0,-400,300,killMe,n*50);				}				boardObjects = [];			}						Net.AddAction("action","play");			Net.AddAction("mode","matrix");			Net.AddAction("bid",String(bid));			Net.Send(onPlayReceived);		}				private function onPlayReceived(e:Event)		{			if (Net.Contains("<error>"))			{				MessageBox.Okay(Net.Get("error"));				return;			}						rollResult = Net.Get("result");			rollID = Net.Get("rollID");						for (var n:int = 0; n < 9; n++)			{				var card:Card;								if (rollResult.charAt(n) == "0") card = new Card(Game.Profiles.Get(profileIndexes[0]));				else card = new Card(Game.Profiles.Get(profileIndexes[1]));								addChild(card);				card.setPosition(800,300);				boardObjects[n] = card;				var dX:int = 95;				var dY:int = 147;				dX += n * 160;				while (dX > 480)				{					dY += 180;					dX -= 480;				}				card.moveTo(dX,dY,300,n==8?checkWin:null,n*100);				var rand:int = int(Math.floor(Math.random()*24));				rand -= 12;				card.rotate("z",rand,300,null,n*100);				SoundEngine.PlaySound(SoundEngine.SWOOSH,n*100);			}			loadNewProfiles();		}		private var checkTimer:Timer;		private function checkWin(o:GameObject = null)		{			if (checkTimer != null)			{				checkTimer.removeEventListener(TimerEvent.TIMER, onCheckWin);				checkTimer.stop();				checkTimer = null;			}			for (var n:int = 0; n < 9; n++)			{				if (boardObjects[n].isLoaded == false)				{					checkTimer = new Timer(20,1);					checkTimer.addEventListener(TimerEvent.TIMER, onCheckWin);					checkTimer.start();					return;				}			}			for (n = 0; n < 9; n++)			{				(boardObjects[n] as GameObject).flip(200,n==8?onFlipComplete:null,n*50);			}		}		private var winAmount:int;		private var connections:int;		private function onFlipComplete(o:GameObject = null)		{			winAmount = 0;			connections = 0;						// CHECK ACROSS			if (boardObjects[0].ID == boardObjects[1].ID && boardObjects[1].ID == boardObjects[2].ID && boardObjects[2].ID == Game.Profiles.Get(0).ID ) 			{				(boardObjects[0] as GameObject).blink(5000, false, 333, 0xFF0000, null, 333);				(boardObjects[1] as GameObject).blink(5000, false, 333, 0xFF0000, null, 333);				(boardObjects[2] as GameObject).blink(5000, false, 333, 0xFF0000, null, 333);								winAmount += bid;				connections++;			}			if (boardObjects[3].ID == boardObjects[4].ID && boardObjects[4].ID == boardObjects[5].ID && boardObjects[5].ID == Game.Profiles.Get(0).ID )			{				(boardObjects[3] as GameObject).blink(5000, false, 333, 0xFF0000, null, 333);				(boardObjects[4] as GameObject).blink(5000, false, 333, 0xFF0000, null, 333);				(boardObjects[5] as GameObject).blink(5000, false, 333, 0xFF0000, null, 333);								winAmount += bid;				connections++;			}			if (boardObjects[6].ID == boardObjects[7].ID && boardObjects[7].ID == boardObjects[8].ID && boardObjects[8].ID == Game.Profiles.Get(0).ID )			{				(boardObjects[6] as GameObject).blink(5000, false, 333, 0xFF0000, null, 333);				(boardObjects[7] as GameObject).blink(5000, false, 333, 0xFF0000, null, 333);				(boardObjects[8] as GameObject).blink(5000, false, 333, 0xFF0000, null, 333);								winAmount += bid;				connections++;			}			// CHECK DOWN			if (boardObjects[0].ID == boardObjects[3].ID && boardObjects[3].ID == boardObjects[6].ID && boardObjects[6].ID == Game.Profiles.Get(0).ID )			{				(boardObjects[0] as GameObject).blink(5000, false, 333, 0x00FF00, null, 111);				(boardObjects[3] as GameObject).blink(5000, false, 333, 0x00FF00, null, 111);				(boardObjects[6] as GameObject).blink(5000, false, 333, 0x00FF00, null, 111);								winAmount += bid;				connections++;			}			if (boardObjects[1].ID == boardObjects[4].ID && boardObjects[4].ID == boardObjects[7].ID && boardObjects[7].ID == Game.Profiles.Get(0).ID )			{				(boardObjects[1] as GameObject).blink(5000, false, 333, 0x00FF00, null, 111);				(boardObjects[4] as GameObject).blink(5000, false, 333, 0x00FF00, null, 111);				(boardObjects[7] as GameObject).blink(5000, false, 333, 0x00FF00, null, 111);								winAmount += bid;				connections++;			}			if (boardObjects[2].ID == boardObjects[5].ID && boardObjects[5].ID == boardObjects[8].ID && boardObjects[8].ID == Game.Profiles.Get(0).ID )			{				(boardObjects[2] as GameObject).blink(5000, false, 333, 0x00FF00, null, 111);				(boardObjects[5] as GameObject).blink(5000, false, 333, 0x00FF00, null, 111);				(boardObjects[8] as GameObject).blink(5000, false, 333, 0x00FF00, null, 111);								winAmount += bid;				connections++;			}						if (boardObjects[0].ID == boardObjects[4].ID && boardObjects[4].ID == boardObjects[8].ID && boardObjects[8].ID == Game.Profiles.Get(0).ID )			{				(boardObjects[0] as GameObject).blink(5000, false, 333, 0x0000FF, null, 222);				(boardObjects[4] as GameObject).blink(5000, false, 333, 0x0000FF, null, 222);				(boardObjects[8] as GameObject).blink(5000, false, 333, 0x0000FF, null, 222);								winAmount += bid;				connections++;			}			if (boardObjects[2].ID == boardObjects[4].ID && boardObjects[4].ID == boardObjects[6].ID && boardObjects[6].ID == Game.Profiles.Get(0).ID )			{				(boardObjects[2] as GameObject).blink(5000, false, 333, 0x0000FF, null, 222);				(boardObjects[4] as GameObject).blink(5000, false, 333, 0x0000FF, null, 222);				(boardObjects[6] as GameObject).blink(5000, false, 333, 0x0000FF, null, 222);								winAmount += bid;				connections++;			}						if (winAmount == bid * 8)			{				// JACKPOT!!!				winAmount *= 2;			}						if (winAmount > 0)			{				display(winAmount+" coins won!!");				SoundEngine.PlaySound(SoundEngine.COINS);								Net.AddAction("action","win");				Net.AddAction("rollID",String(rollID));				Net.AddAction("bid",String(bid));				Net.AddAction("result",String(rollResult));				Net.AddAction("winAmount",String(winAmount));				Net.Send(onWinConfirmation);			}			else finishWinConfirmation();		}		private function onWinConfirmation(e:Event)		{			var win:int = int(Net.Get("coins"));			Game.SetVirtualCoins(win);						finishWinConfirmation();		}		private function finishWinConfirmation()		{			var achieve:String = Net.Get("achievement");			if (achieve != null)			{				MessageBox.Achievement("ACHIEVEMENT EARNED:\nFirst Tic-Tac-Toe Play", onAchieveOK);			}			else onAchieveOK();		}		private function onAchieveOK()		{			var minigame:int = int(Net.Get("minigame"));			if (minigame == 1)			{				Game.Message("Loading profiles for minigame...");								minigamePanel = new MinigameSelector(bid, onMinigameClose);				addChild(minigamePanel);								minigamePanel.x = 800;				minigamePanel.moveTo(0, 0, 1000);			}			else			{				isPlayDone = true;				if (isLoadDone) enableButtons();			}		}		private function onMinigameClose()		{			isPlayDone = true;			if (isLoadDone) enableButtons();			removeChild(minigamePanel);		}		private function onCheckWin(e:Event) { checkWin(); }				private function display(s:String)		{			var t:TextObject = new TextObject();			var tf:TextFormat = new TextFormat("Bangla", 72, 0xFFFFFF, true, null, null, null, null, TextFormatAlign.CENTER);			t.setText(s);			t.setTextFormat(tf);			t.filters = [new GlowFilter(0x0000FF,1.0,12.0,12.0,2,1,false,false)];						// 200, 280			addChild(t);			t.setPosition(50,220);			t.setWidth(620);						t.moveTo(50,0,3000,killMe);			t.fadeTo(0,3000);		}				private function disableButtons()		{			backBtn.Disable();			reset.Disable();			minus1.Disable();			minus5.Disable();			minus10.Disable();			minus25.Disable();			plus1.Disable();			plus5.Disable();			plus10.Disable();			plus25.Disable();			playBtn.Disable();		}		private function enableButtons()		{			backBtn.Enable();			reset.Enable();			minus1.Enable();			minus5.Enable();			minus10.Enable();			minus25.Enable();			plus1.Enable();			plus5.Enable();			plus10.Enable();			plus25.Enable();			playBtn.Enable();		}				private function onReset() { setBid(1); }		private function onMinus1() { setBid(bid-1); }		private function onMinus5() { setBid(bid-5); }		private function onMinus10() { setBid(bid-10); }		private function onMinus25() { setBid(bid-25); }		private function onPlus1() { setBid(bid+1); }		private function onPlus5() { setBid(bid+5); }		private function onPlus10() { setBid(bid+10); }		private function onPlus25() { setBid(bid+25); }		private function setBid(n:int)		{			bid = n;			if (bid < 10) bid = 10;			if (bid > 100) bid = 100;			if (bid > Game.GetVirtualCoins()) 			{				if (Game.GetVirtualCoins() == 0)				{					//TODO: Message box that says you're out of currency ...				}				else bid = Game.GetVirtualCoins();			}			bidText.setText(String(bid));			bidText.setTextFormat(bidTextFormat);		}	}	}