package classes{	import classes.*;	import flash.events.Event;	import flash.text.TextField;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.display.Loader;	import flash.text.TextFormat;	import flash.text.Font;	import flash.text.TextFormatAlign;	import flash.filters.GlowFilter;	import flash.net.navigateToURL;	import flash.system.ApplicationDomain;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.text.TextFieldAutoSize;	import flash.display.BitmapData;	import flash.display.Bitmap;	import flash.events.ProgressEvent;	import flash.display.DisplayObjectContainer;	import flash.display.DisplayObject;	import flash.system.Security;		import flash.media.Sound;	import flash.system.System;		public class Game extends GameObject 	{		// 		public static var OFFLINE:Boolean = false;		public static var LOCAL:Boolean = false;				//==================================//		// GLOBAL VARIABLES					//		//==================================//		private static var MusicEnabled:Boolean = true;	// Is music on or off?		private static var SoundEnabled:Boolean = true;	// Is sound on or off?				private static var VirtualCoins:int = 1234;		// Number of Virtual Coins		private static var Diamonds:int = 5;			// Number of Diamonds				public static var _instance:GameObject;		// A global reference to our Game instance				//public static var Profiles:Array;		public static var Profiles:ProfileList;				public static var GameMode:String;				public static var Tumbler1:String;		public static var Tumbler2:String;		public static var Tumbler3:String;				// FACEBOOK VARIABLES !!!!				//==================================//		// LOCAL VARIABLES					//		//==================================//				// Layers		public static var bgLayer:GameObject;		public static var gameLayer:GameObject;		public static var overLayer:GameObject;		public static var mbLayer:GameObject;		public static var systemLayer:GameObject;				// Game mode variables		private var titleScreen:Title;		private var matrixScreen:MatrixScreen;		private var pokerScreen:PokerScreen;		private var slotsScreen:SlotsScreen;				private var contentManager:ContentManager;				private var isTitleLoaded:Boolean = false;		private var isMatrixLoaded:Boolean = false;		private var isSlotsLoaded:Boolean = false;		private var isPokerLoaded:Boolean = false;		private var loadingProgress:Number = 0;				private var contentManagerProgressBar:GameObject;		private var contentManagerProgressBarFiller:GameObject;				// Loading screen variables		private var bg:GameObject;		private var loadingText:TextObject;		private var loadingTextFormat:TextFormat;				// Overlay variables		private var headerBar:GameObject;		private var footerBar:GameObject;		private var diamondIcon:GameObject;		private var coinIcon:GameObject;		private static var musicBtn:Button;		private static var soundBtn:Button;		private static var virtualCoinsText:TextObject;		private static var diamondsText:TextObject;		private static var coinsTF:TextFormat;				private static var systemMessage:TextObject;		private static var systemMessageTF:TextFormat;				//==================================//		// PUBLIC LOCAL FUNCTIONS			//		//==================================//				public function Game() 		{			// FACEBOOK STUFF			Security.loadPolicyFile("http://graph.facebook.com/crossdomain.xml");			Security.loadPolicyFile("http://profile.ak.fbcdn.net/crossdomain.xml");			Security.loadPolicyFile("https://graph.facebook.com/crossdomain.xml");			Security.loadPolicyFile("https://profile.ak.fbcdn.net/crossdomain.xml");			Security.allowDomain("*");			Security.allowInsecureDomain("*");			_instance = this; // This is just a global static reference to the Game class							  // in case we ever need to gain access to its members from							  // outside ... I've never had a need for it, but I have it							  // referenced nonetheless ...							  			Game.GameMode = "Loading";						// Initialize our layers			bgLayer = new GameObject();		// Background Layer			gameLayer = new GameObject();	// Game Layer			overLayer = new GameObject();	// Overlay Layer			mbLayer = new GameObject();		// Message Box Layer			systemLayer = new GameObject();	// System Messages (always on top ...)						systemMessage = new TextObject();			systemMessageTF = new TextFormat("Impact", 16, 0xFFFFFF);						// Initialize some other stuff...			Net.Initialize();			SoundEngine.Initialize();			MessageBox.Initialize(mbLayer);			InfoBox.Initialize(mbLayer);						// Create our two fonts we use in the game			Font.registerFont(Impact);			Font.registerFont(Bangla);						// Initialize our Profile List			Profiles = new ProfileList();			// Now to initialize all our core variables			bg = GetClass("Background");			loadingText = new TextObject();			loadingTextFormat = new TextFormat("Impact", 48, 0xFFFFFF, null, null, null, null, null, TextFormatAlign.CENTER);			loadingText.setSelectable(false);						virtualCoinsText = new TextObject();			diamondsText = new TextObject();			coinsTF = new TextFormat("Impact", 18, 0xFFFFFF, null, null, null, null, null, TextFormatAlign.RIGHT);			virtualCoinsText.setSelectable(false);			diamondsText.setSelectable(false);						contentManagerProgressBar = GetClass("ProgressBarBackground");			contentManagerProgressBarFiller = GetClass("ProgressBarFiller");						contentManager = new ContentManager();						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event)		{			addChild(bgLayer);			addChild(gameLayer);			addChild(overLayer);			addChild(mbLayer);			addChild(systemLayer);						systemLayer.addChild(systemMessage);			systemMessage.setRectangle(8,596,720,24);						bgLayer.addChild(bg);			overLayer.addChild(contentManagerProgressBar);			overLayer.addChild(contentManagerProgressBarFiller);			overLayer.addChild(loadingText);						contentManagerProgressBar.x = 40;		contentManagerProgressBar.y = 365;			contentManagerProgressBarFiller.x = 58;	contentManagerProgressBarFiller.y = 380;						loadingText.setRectangle(0,250,720,100);			loadingText.setText("Loading ... please wait.");			loadingText.setTextFormat(loadingTextFormat);						contentManager.loadExternalSWF(ContentManager.TITLE, onTitleLoaded, onLoadingProgress);		}				//==================================//		// PRIVATE LOCAL FUNCTIONS			//		//==================================//				private function onLoadingProgress(e:ProgressEvent)		{			var pctComplete:Number = e.bytesLoaded / e.bytesTotal;			contentManagerProgressBarFiller.scaleX = pctComplete;		}				private function onTitleLoaded()		{			isTitleLoaded = true;						Net.AddAction("action","init");			Net.Send(onTitleInitReceived);		}		private function onTitleInitReceived(e:Event)		{			if (Net.Contains("www.facebook.com/dialog/oauth?client_id="))			{				SoundEngine.PlaySound(SoundEngine.BUZZER);				MessageBox.Okay("Your client doesn't seem to be authorized. Proceeding to hard-coded results for testing.");				return;			}			Tumbler1 = Net.Get("tumbler1");			Tumbler2 = Net.Get("tumbler2");			Tumbler3 = Net.Get("tumbler3");			SetVirtualCoins(int(Net.Get("virtualCoins")));			SetDiamonds(int(Net.Get("diamonds")));			Net.Get("musicEnabled")=="0"?MusicEnabled=false:MusicEnabled=true;			Net.Get("soundEnabled")=="0"?SoundEnabled=false:SoundEnabled=true;									var numFriends:int = int(Net.Get("numOfFriends"));			for (var n:int = 0; n < numFriends+1; n++)			{				Profiles.Add(Net.Get("profile"+n+"Name"), Net.Get("profile"+n+"ID"), Net.Get("profile"+n+"Image"));			}						if (Profiles.Get(0).Name == "  Jonathan Plumb")			{				var t:Timer = new Timer(20,0);				t.addEventListener(TimerEvent.TIMER, function()								   {									   Message("Memory: "+System.totalMemory / 1024 / 1024 + " MB");								   });				t.start();			}						var firstPlay:String = Net.Get("firstLogin");			if (firstPlay == "1")			{				MessageBox.Okay("Welcome to MugShot Casino!\nSince this is your first time playing, we have given you 1,000 coins to play with! Have fun!", continueTitleLoading);			}			else continueTitleLoading();		}		private function continueTitleLoading()		{			overLayer.removeChild(contentManagerProgressBar);			overLayer.removeChild(contentManagerProgressBarFiller);			overLayer.removeChild(loadingText);						headerBar = Game.GetClass("HeaderBar") as GameObject;			footerBar = Game.GetClass("FooterBar") as GameObject;			diamondIcon = Game.GetClass("DiamondIcon") as GameObject;			coinIcon = Game.GetClass("CoinIcon") as GameObject;			soundBtn = new Button(Button.SOUND);			musicBtn = new Button(Button.MUSIC);						//diamondIcon.addEventListener(MouseEvent.ROLL_OVER, onDiamondRollOver);			//diamondIcon.addEventListener(MouseEvent.ROLL_OUT, onDiamondRollOut);			//diamondIcon.addEventListener(MouseEvent.MOUSE_MOVE, onDiamondMove);			//coinIcon.addEventListener(MouseEvent.ROLL_OVER, onCoinRollOver);			//coinIcon.addEventListener(MouseEvent.ROLL_OUT, onCoinRollOut);			//coinIcon.addEventListener(MouseEvent.MOUSE_MOVE, onCoinMove);						soundBtn.SetToggle(Game.IsSoundEnabled());			musicBtn.SetToggle(Game.IsMusicEnabled());			soundBtn.SetOnClick(onSoundClick);			musicBtn.SetOnClick(onMusicClick);						titleScreen = new Title();			gameLayer.addChild(titleScreen);						overLayer.addChild(headerBar);			overLayer.addChild(footerBar);			overLayer.addChild(virtualCoinsText);			overLayer.addChild(diamondsText);			overLayer.addChild(soundBtn);			overLayer.addChild(musicBtn);			overLayer.addChild(diamondIcon);			overLayer.addChild(coinIcon);						diamondIcon.setPosition(800,800);			coinIcon.setPosition(0,800);			headerBar.x = 0;			headerBar.y = -100;			footerBar.x = 0;			footerBar.y = 620;			soundBtn.x = 688;			soundBtn.y = 30;			musicBtn.x = 660;			musicBtn.y = 29;			virtualCoinsText.setRectangle(576,2,130,24);			diamondsText.setRectangle(460,2,104,24);						virtualCoinsText.alpha = 0.0;			diamondsText.alpha = 0.0;			musicBtn.alpha = 0.0;			soundBtn.alpha = 0.0;						headerBar.moveTo(0,0,300);			footerBar.moveTo(0,596,300);			diamondIcon.moveTo(455,1,300);			coinIcon.moveTo(574,0,300);			virtualCoinsText.fadeTo(1.0,300,null,300);			diamondsText.fadeTo(1.0,300,null,300);			musicBtn.fadeTo(1.0,300,null,300);			soundBtn.fadeTo(1.0,300,null,300);							titleScreen.SetMatrixCallback(loadMatrix);			titleScreen.SetPokerCallback(loadPoker);			titleScreen.SetSlotsCallback(loadSlots);						Game.GameMode = "Title";		}				// CALLBACK FUNCTIONS		private var loadingTimer:Timer;		private function loadMatrix()		{			contentManager.loadExternalSWF(ContentManager.MATRIX, onMatrixLoaded, onLoadingProgress);			titleScreen.shatter("matrix", onTitleShatteredForMatrix);		}		private function loadSlots()		{			contentManager.loadExternalSWF(ContentManager.SLOTS, onSlotsLoaded, onLoadingProgress);			titleScreen.shatter("slots", onTitleShatteredForSlots);		}		private function loadPoker()		{			contentManager.loadExternalSWF(ContentManager.POKER, onPokerLoaded, onLoadingProgress);			titleScreen.shatter("poker", onTitleShatteredForPoker);		}				private function onMatrixLoaded() { isMatrixLoaded = true; }		private function onSlotsLoaded() { isSlotsLoaded = true; }		private function onPokerLoaded() { isPokerLoaded = true; }				private function onTitleShatteredForMatrix(obj:GameObject = null)		{			if (!isMatrixLoaded)			{				gameLayer.addChild(loadingText);				gameLayer.addChild(contentManagerProgressBar);				gameLayer.addChild(contentManagerProgressBarFiller);				loadingTimer = new Timer(20,0);				loadingTimer.addEventListener(TimerEvent.TIMER, onMatrixLoadingProgress);				loadingTimer.start();			}			else			{				gameLayer.removeChild(titleScreen);				GameMode = "Matrix";				matrixScreen = new MatrixScreen();				matrixScreen.SetBackCallback(onMatrixBack);				gameLayer.addChild(matrixScreen);			}		}		private function onTitleShatteredForPoker(obj:GameObject = null)		{			if (!isPokerLoaded)			{				gameLayer.addChild(loadingText);				gameLayer.addChild(contentManagerProgressBar);				gameLayer.addChild(contentManagerProgressBarFiller);				loadingTimer = new Timer(20,0);				loadingTimer.addEventListener(TimerEvent.TIMER, onPokerLoadingProgress);				loadingTimer.start();			}			else			{				gameLayer.removeChild(titleScreen);				GameMode = "Poker";				pokerScreen = new PokerScreen();				pokerScreen.SetBackCallback(onPokerBack);				gameLayer.addChild(pokerScreen);			}		}		private function onTitleShatteredForSlots(obj:GameObject = null)		{			if (!isSlotsLoaded)			{				gameLayer.addChild(loadingText);				gameLayer.addChild(contentManagerProgressBar);				gameLayer.addChild(contentManagerProgressBarFiller);				loadingTimer = new Timer(20,0);				loadingTimer.addEventListener(TimerEvent.TIMER, onSlotsLoadingProgress);				loadingTimer.start();			}			else			{				gameLayer.removeChild(titleScreen);				GameMode = "Slots";				slotsScreen = new SlotsScreen();				slotsScreen.SetBackCallback(onSlotsBack);				gameLayer.addChild(slotsScreen);			}		}						private function onMatrixLoadingProgress(e:Event)		{			if (isMatrixLoaded)			{				loadingTimer.removeEventListener(TimerEvent.TIMER, onMatrixLoadingProgress);				loadingTimer.stop();				loadingTimer = null;								gameLayer.removeChild(loadingText);				gameLayer.removeChild(contentManagerProgressBar);				gameLayer.removeChild(contentManagerProgressBarFiller);								onTitleShatteredForMatrix();			}		}		private function onPokerLoadingProgress(e:Event)		{			if (isPokerLoaded)			{				loadingTimer.removeEventListener(TimerEvent.TIMER, onPokerLoadingProgress);				loadingTimer.stop();				loadingTimer = null;								gameLayer.removeChild(loadingText);				gameLayer.removeChild(contentManagerProgressBar);				gameLayer.removeChild(contentManagerProgressBarFiller);								onTitleShatteredForPoker();			}		}		private function onSlotsLoadingProgress(e:Event)		{			if (isSlotsLoaded)			{				loadingTimer.removeEventListener(TimerEvent.TIMER, onSlotsLoadingProgress);				loadingTimer.stop();				loadingTimer = null;								gameLayer.removeChild(loadingText);				gameLayer.removeChild(contentManagerProgressBar);				gameLayer.removeChild(contentManagerProgressBarFiller);								onTitleShatteredForSlots();			}		}				private function onMatrixBack() { matrixScreen.Shatter(onMatrixShattered); }		private function onPokerBack() { pokerScreen.Shatter(onPokerShattered); }		private function onSlotsBack() { slotsScreen.Shatter(onSlotsShattered); }				private function onMatrixShattered(obj:GameObject = null)		{			GameMode = "Title";			gameLayer.removeChild(matrixScreen);			gameLayer.addChild(titleScreen);			titleScreen.Reset();		}		private function onPokerShattered(obj:GameObject = null)		{			GameMode = "Title";			gameLayer.removeChild(pokerScreen);			gameLayer.addChild(titleScreen);			titleScreen.Reset();		}		private function onSlotsShattered(obj:GameObject = null)		{			GameMode = "Title";			gameLayer.removeChild(slotsScreen);			gameLayer.addChild(titleScreen);			titleScreen.Reset();		}		private function onSoundClick(obj:GameObject = null)		{			Game.ToggleSound();			soundBtn.SetToggle(Game.IsSoundEnabled());		}		private function onMusicClick(obj:GameObject = null)		{			Game.ToggleMusic();			musicBtn.SetToggle(Game.IsMusicEnabled());		}				private function onDiamondRollOver(e:MouseEvent)		{			if (Game.GameMode == "Loading") return;			InfoBox.Show("<b>Diamonds</b><br />\nDiamonds are obtained through periodic play<br />\n"+						 						"and are used to purchase goods through the<br />\n"+												"e-commerce store!",e.stageX + 2, e.stageY + 2);		}		private function onDiamondRollOut(e:MouseEvent)		{			if (Game.GameMode == "Loading") return;			InfoBox.Hide();		}		private function onDiamondMove(e:MouseEvent)		{			if (Game.GameMode == "Loading") return;			InfoBox.SetPosition(e.stageX + 2, e.stageY + 2);		}		private function onCoinRollOver(e:MouseEvent)		{					}		private function onCoinRollOut(e:MouseEvent)		{					}		private function onCoinMove(e:MouseEvent)		{					}				// GLOBAL FUNCTIONS				public static function GetVirtualCoins():int { return VirtualCoins; }		public static function GetDiamonds():int { return Diamonds; }				public static function SetVirtualCoins(n:int) { VirtualCoins = n; virtualCoinsText.setText("" + n); virtualCoinsText.setTextFormat(coinsTF); }		public static function SetDiamonds(n:int) { Diamonds = n; diamondsText.setText("" + n); diamondsText.setTextFormat(coinsTF); }				public static function IsSoundEnabled():Boolean { return SoundEnabled; }		public static function IsMusicEnabled():Boolean { return MusicEnabled; }				public static function SetSoundEnabled(b:Boolean) { if (SoundEnabled != b) ToggleSound(); }		public static function SetMusicEnabled(b:Boolean) { if (MusicEnabled != b) ToggleMusic(); }			public static function ToggleSound()		{			Game.SoundEnabled = !Game.SoundEnabled;						soundBtn.SetToggle(Game.SoundEnabled);						Net.AddAction("action",(SoundEnabled?"toggleSoundOn":"toggleSoundOff"));			Net.Send();						SoundEngine.PlaySound(SoundEngine.CLICK);		}		public static function ToggleMusic()		{			Game.MusicEnabled = !Game.MusicEnabled;						musicBtn.SetToggle(Game.MusicEnabled);						Net.AddAction("action",(MusicEnabled?"toggleMusicOn":"toggleMusicOff"));			Net.Send();						SoundEngine.PlaySound(SoundEngine.CLICK);		}		private static function onResponse(e:Event) { e.currentTarget.removeEventListener(Event.COMPLETE, onResponse); }				public static function ParseXML(xmlFile:String, tag:String):String		{			var startIndex:int = xmlFile.indexOf("<"+tag+">") + ("<"+tag+">").length;			var endIndex:int = xmlFile.indexOf("</"+tag+">");						if (startIndex >= 0 && endIndex >= 0)				return xmlFile.substr(startIndex, endIndex - startIndex);			else return null;		}		public static function GetInstance() : GameObject { return _instance; }				public static function GetSound(className:String) : Sound		{			var clip:Class = ApplicationDomain.currentDomain.getDefinition(className) as Class;						if (clip != null)			{				var snd:Sound = new clip() as Sound;				return snd;			}			else return null;		}		public static function GetClass(className:String) : GameObject		{			var clip:Class = ApplicationDomain.currentDomain.getDefinition(className) as Class;						if (clip != null)			{				var obj:GameObject = new clip() as GameObject;				return obj;			}			else return null;		}		public static function Message(s:String)		{			systemMessage.setText(s);			systemMessage.setTextFormat(systemMessageTF);						systemMessage.alpha = 1;			systemMessage.fadeTo(0, 2000, null, 2000);		}	}	}