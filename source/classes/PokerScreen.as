package classes{	import flash.events.Event;	import flash.text.TextFormat;	import flash.text.TextField;	import flash.net.URLLoader;	import flash.text.TextFormatAlign;	import flash.geom.Point;	import flash.net.URLRequest;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.text.TextFieldAutoSize;	import flash.filters.GlowFilter;	import flash.system.System;		public class PokerScreen extends GameObject	{		private var bid:int;				private var profileIndexes:Array;		private var boardCards:Array;		private var nextCards:Array;				private var bidPlate:GameObject;		private var bidText:TextObject;		private var bidTextFormat:TextFormat;				private var minus1:Button;		private var minus5:Button;		private var minus10:Button;		private var minus25:Button;		private var plus1:Button;		private var plus5:Button;		private var plus10:Button;		private var plus25:Button;		private var reset:Button;		private var playBtn:Button;		private var backBtn:Button;				private var playStartTime:int;		private var net:URLLoader;				private var rollID:String;		private var rollResult:String;				private var isLoadDone:Boolean = false;		private var isPlayDone:Boolean = true;				private var minigamePanel:MinigameSelector;		public function PokerScreen() 		{			profileIndexes = new Array();			boardCards = new Array();			nextCards = new Array();						bidPlate = Game.GetClass("BidPlate") as GameObject;			minus1 = new Button(Button.MINUS1);			minus5 = new Button(Button.MINUS5);			minus10 = new Button(Button.MINUS10);			minus25 = new Button(Button.MINUS25);			plus1 = new Button(Button.PLUS1);			plus5 = new Button(Button.PLUS5);			plus10 = new Button(Button.PLUS10);			plus25 = new Button(Button.PLUS25);			reset = new Button(Button.RESET);			playBtn = new Button(Button.PLAY);			backBtn = new Button(Button.BACK_ARROW);			bidText = new TextObject();			bidTextFormat = new TextFormat("Impact",48,0xFFFFFF,null,null,null,null,null, TextFormatAlign.CENTER);						addChild(playBtn);			addChild(bidPlate);			bidPlate.addChild(minus1);			bidPlate.addChild(minus5);			bidPlate.addChild(minus10);			bidPlate.addChild(minus25);			bidPlate.addChild(plus1);			bidPlate.addChild(plus5);			bidPlate.addChild(plus10);			bidPlate.addChild(plus25);			bidPlate.addChild(reset);			bidPlate.addChild(bidText);			addChild(backBtn);						playBtn.SetOnClick(onPlay);			reset.SetOnClick(onReset);			minus1.SetOnClick(onMinus1);			minus5.SetOnClick(onMinus5);			minus10.SetOnClick(onMinus10);			minus25.SetOnClick(onMinus25);			plus1.SetOnClick(onPlus1);			plus5.SetOnClick(onPlus5);			plus10.SetOnClick(onPlus10);			plus25.SetOnClick(onPlus25);						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				public function SetBackCallback(f:Function)		{			backBtn.SetOnClick(f);		}		private function killMe(o:GameObject)		{			if (contains(o)) removeChild(o);			o.Destroy();			o = null;		}		public function Shatter(callback:Function)		{			if (boardCards.length > 0)			{				for (var n:int = 0; n < boardCards.length; n++)				{					(boardCards[n] as Card).moveTo(0,-400,300,killMe);				}				boardCards = [];			}						bidText.fadeTo(0,300);			playBtn.moveTo(260,300,300);			bidPlate.moveTo(900, -100, 500);			reset.moveTo(-100, 900, 500);			minus1.moveTo(900, 900, 500);			minus5.moveTo(-100, -100, 500);			minus10.moveTo(900, -100, 500);			minus25.moveTo(-100, 900, 500);			plus1.moveTo(900, 900, 500);			plus5.moveTo(-100, -100, 500);			plus10.moveTo(900, -100, 500);			plus25.moveTo(-100, 900, 500, callback);		}						//======================================//		// PRIVATE FUNCTIONS					//		//======================================//				private function onAddedToStage(e:Event)		{			setBid(10);						disableButtons();						playBtn.setPosition(240,360);			bidPlate.setRandomPosition();			reset.setRandomPosition();			minus1.setRandomPosition();			minus5.setRandomPosition();			minus10.setRandomPosition();			minus25.setRandomPosition();			plus1.setRandomPosition();			plus5.setRandomPosition();			plus10.setRandomPosition();			plus25.setRandomPosition();			backBtn.setRandomPosition();			backBtn.setScale(0.5);						bidText.setText(String(bid));			bidText.setTextFormat(bidTextFormat);			bidText.setPosition(64, 99 - bidText.getTextHeight()/2);			bidText.setWidth(88);						bidPlate.moveTo(32,360,500);			backBtn.moveTo(4,530,500);			reset.moveTo(8,33,500);			minus1.moveTo(33,33,500);			minus5.moveTo(33,65,500);			minus10.moveTo(33,97,500);			minus25.moveTo(33,129,500);			plus1.moveTo(160,33,500);			plus5.moveTo(160,65,500);			plus10.moveTo(160,97,500);			plus25.moveTo(160,129,500);			bidText.fadeTo(1.0,500, null, 500);						loadNewProfiles();		}		private function loadNewProfiles(e:* = null)		{			isLoadDone = false;						profileIndexes = [];			profileIndexes[0] = 0;						if (nextCards != null)			{				for (var n:int = 0; n < nextCards.length; n++)				{					var found:Boolean = false;					if (boardCards != null)					{						for (var i:int = 0; i < boardCards.length; i++)						{							if (boardCards[i] == nextCards[n]) found = true;						}					}					if (!found)					{						(nextCards[n] as Card).Destroy();						nextCards[n] =  null;					}				}			}						for (n = 1; n < 13; n++)			{				found = false;				var pI:int = int(Math.random()*(Game.Profiles.length-2))+1								for (var t:int = 1; t < profileIndexes.length; t++)					if (profileIndexes[t] == pI)						found = true;										if (!found)					profileIndexes[n] = pI;				else n--;			}						if (nextCards != null) nextCards = new Array();			var deck:String = "A234567890JQKA234567890JQKA234567890JQKA234567890JQK";						for (n = 0; n < profileIndexes.length; n++)			{				//Game.Profiles.Get(profileIndexes[n]).LoadProfile();								for (n = 0; n < 13; n++)				{					var c1:Card = new Card(Game.Profiles.Get(profileIndexes[n]));					var c2:Card = new Card(Game.Profiles.Get(profileIndexes[n]));					var c3:Card = new Card(Game.Profiles.Get(profileIndexes[n]));					var c4:Card = new Card(Game.Profiles.Get(profileIndexes[n]));										c1.setCard("1",deck.charAt(n)); nextCards[n] = c1;					c2.setCard("2",deck.charAt(n)); nextCards[n+13] = c2;					c3.setCard("3",deck.charAt(n)); nextCards[n+26] = c3;					c4.setCard("4",deck.charAt(n)); nextCards[n+39] = c4;				}			}						//var timer:Timer = new Timer(20,0);			//timer.addEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);			//timer.start();						isLoadDone = true;						if (isPlayDone) enableButtons();		}		private function onPlay(e:Event=null)		{			isPlayDone = false;			isLoadDone = false;						if (Game.GetVirtualCoins() < bid)			{				MessageBox.Okay("Insufficient funds to play.");				return;			}						Game.SetVirtualCoins(Game.GetVirtualCoins() - bid);						disableButtons();			if (boardCards.length > 0)			{				for (var n:int = 0; n < boardCards.length; n++)				{					(boardCards[n] as Card).moveTo(0,-400,300,killMe,n*50);				}				boardCards = [];			}						Net.AddAction("action","play");			Net.AddAction("mode","poker");			Net.AddAction("bid",String(bid));			Net.Send(onPlayReceived);		}		private function onPlayReceived(e:Event)		{			if (Net.Contains("<error>"))			{				MessageBox.Okay(Net.Get("error"));				enableButtons();				return;			}						rollID = Net.Get("rollID");			rollResult = Net.Get("result");						//	abcdefghijklmnopqrstuvwxyzBCDEFGHILMNOPRSTUVWXYZ!@#$						var res:String = "" + rollResult;						while (res.indexOf("1") >= 0) res = res.replace("1", "_0");			while (res.indexOf("2") >= 0) res = res.replace("2", "_J");			while (res.indexOf("3") >= 0) res = res.replace("3", "_Q");			while (res.indexOf("4") >= 0) res = res.replace("4", "_K");			while (res.indexOf("a") >= 0) res = res.replace("a","^A");				while (res.indexOf("o") >= 0) res = res.replace("o", "+A");			while (res.indexOf("b") >= 0) res = res.replace("b","^2");				while (res.indexOf("p") >= 0) res = res.replace("p", "+2");			while (res.indexOf("c") >= 0) res = res.replace("c","^3");				while (res.indexOf("q") >= 0) res = res.replace("q", "+3");			while (res.indexOf("d") >= 0) res = res.replace("d","^4");				while (res.indexOf("r") >= 0) res = res.replace("r", "+4");			while (res.indexOf("e") >= 0) res = res.replace("e","^5");				while (res.indexOf("s") >= 0) res = res.replace("s", "+5");			while (res.indexOf("f") >= 0) res = res.replace("f","^6");				while (res.indexOf("t") >= 0) res = res.replace("t", "+6");			while (res.indexOf("g") >= 0) res = res.replace("g","^7");				while (res.indexOf("u") >= 0) res = res.replace("u", "+7");			while (res.indexOf("h") >= 0) res = res.replace("h","^8");				while (res.indexOf("v") >= 0) res = res.replace("v", "+8");			while (res.indexOf("i") >= 0) res = res.replace("i","^9");				while (res.indexOf("w") >= 0) res = res.replace("w", "+9");			while (res.indexOf("j") >= 0) res = res.replace("j","^0");				while (res.indexOf("x") >= 0) res = res.replace("x", "+0");			while (res.indexOf("k") >= 0) res = res.replace("k","^J");				while (res.indexOf("y") >= 0) res = res.replace("y", "+J");			while (res.indexOf("l") >= 0) res = res.replace("l","^Q");				while (res.indexOf("z") >= 0) res = res.replace("z", "+Q");			while (res.indexOf("m") >= 0) res = res.replace("m","^K");				while (res.indexOf("B") >= 0) res = res.replace("B", "+K");			while (res.indexOf("n") >= 0) res = res.replace("n","-A");				while (res.indexOf("C") >= 0) res = res.replace("C", "_A");			while (res.indexOf("D") >= 0) res = res.replace("D","-2");				while (res.indexOf("S") >= 0) res = res.replace("S", "_2");			while (res.indexOf("E") >= 0) res = res.replace("E","-3");				while (res.indexOf("T") >= 0) res = res.replace("T", "_3");			while (res.indexOf("F") >= 0) res = res.replace("F","-4");				while (res.indexOf("U") >= 0) res = res.replace("U", "_4");			while (res.indexOf("G") >= 0) res = res.replace("G","-5");				while (res.indexOf("V") >= 0) res = res.replace("V", "_5");			while (res.indexOf("H") >= 0) res = res.replace("H","-6");				while (res.indexOf("W") >= 0) res = res.replace("W", "_6");			while (res.indexOf("I") >= 0) res = res.replace("I","-7");				while (res.indexOf("X") >= 0) res = res.replace("X", "_7");			while (res.indexOf("L") >= 0) res = res.replace("L","-8");				while (res.indexOf("Y") >= 0) res = res.replace("Y", "_8");			while (res.indexOf("M") >= 0) res = res.replace("M","-9");				while (res.indexOf("Z") >= 0) res = res.replace("Z", "_9");			while (res.indexOf("N") >= 0) res = res.replace("N","-0");				while (res.indexOf("O") >= 0) res = res.replace("O","-J");				while (res.indexOf("P") >= 0) res = res.replace("P","-Q");				while (res.indexOf("R") >= 0) res = res.replace("R","-K");										while (res.indexOf("^") >= 0) res = res.replace("^","1");			while (res.indexOf("-") >= 0) res = res.replace("-","2");			while (res.indexOf("_") >= 0) res = res.replace("_","3");			while (res.indexOf("+") >= 0) res = res.replace("+","4");						var angle:Number = 0;						for (var n:int = 0; n < 5; n++)			{				var card:Card;				for (var t:int = 0; t < 52; t++)				{					var rSuit:String = res.charAt(n*2);					var rNumber:String = res.charAt(n*2+1);										if (nextCards[t].number==rNumber && nextCards[t].suit==rSuit)					{						card = nextCards[t] as Card;						card.setCard(rSuit,rNumber);					}				}				addChild(card);				card.x = 800;				card.y = 300;				boardCards[n] = card;				var dX:int = playBtn.x + playBtn.width/2;				var dY:int = playBtn.y + playBtn.height/2;				card.scaleX = 1.25;				card.scaleY = 1.25;				dX = dX + Math.cos(angle)*280;				dY = dY + Math.sin(angle)*280;				angle -= Math.PI/5;								card.moveTo(dX,dY,500,n==4?onCheckWin:null,n*100);				SoundEngine.PlaySound("Swoosh",n*100);				var rand:int = int(Math.floor(Math.random()*24));				rand -= 12;				card.rotate("z",rand,300,null,n*100);			}		}		private var checkTimer:Timer;		private function onCheckWin(e:*=null)		{			if (checkTimer != null)			{				checkTimer.removeEventListener(TimerEvent.TIMER, onCheckWin);				checkTimer.stop();				checkTimer = null;			}			for (var n:int = 0; n < 5; n++)			{				if (boardCards[n].isLoaded == false)				{					checkTimer = new Timer(20,1);					checkTimer.addEventListener(TimerEvent.TIMER, onCheckWin);					checkTimer.start();					return;				}			}			for (n = 0; n < 5; n++)			{				(boardCards[n] as GameObject).flip(200,n==4?onFlipComplete:null,n*50);				SoundEngine.PlaySound("Flip",n*50);			}		}		private var winAmount:int;		private function onFlipComplete(e:*=null)		{			winAmount = 0;						// Pay table courtesy of http://casinogambling.about.com/od/videopoker/a/vppaytable.htm			sort(boardCards);						var n1:int = boardCards[0].getPokerValue();			var n2:int = boardCards[1].getPokerValue();			var n3:int = boardCards[2].getPokerValue();			var n4:int = boardCards[3].getPokerValue();			var n5:int = boardCards[4].getPokerValue();						// Check for royal flush		// 250			if ((boardCards[0].suit == boardCards[1].suit && boardCards[1].suit == boardCards[2].suit && boardCards[2].suit == boardCards[3].suit && boardCards[3].suit == boardCards[4].suit) &&				(boardCards[0].number=="0" && boardCards[1].number=="J" && boardCards[2].number=="Q" && boardCards[3].number=="K" && boardCards[4].number=="A"))			{				(boardCards[0] as GameObject).blink(5000,false,333,0xFF0000);				(boardCards[1] as GameObject).blink(5000,false,333,0x00FF00);				(boardCards[2] as GameObject).blink(5000,false,333,0x0000FF);				(boardCards[3] as GameObject).blink(5000,false,333,0xFF00FF);				(boardCards[4] as GameObject).blink(5000,false,333,0xFFFF00);								winAmount = bid * 250;				if (bid == 999) winAmount += (4000/5)*999;								display("ROYAL FLUSH!\nWon "+winAmount+" coins!!");			}			// Check for straight flush		// 50			else if ((boardCards[0].suit == boardCards[1].suit && boardCards[1].suit == boardCards[2].suit && boardCards[2].suit == boardCards[3].suit && boardCards[3].suit == boardCards[4].suit) &&					 (boardCards[0].getPokerValue() == boardCards[1].getPokerValue()-1 && boardCards[0].getPokerValue() == boardCards[2].getPokerValue()-2 && boardCards[0].getPokerValue() == boardCards[3].getPokerValue()-3 && boardCards[0].getPokerValue() == boardCards[4].getPokerValue()-4))			{				(boardCards[0] as GameObject).blink(5000,false,333,0xFF0000);				(boardCards[1] as GameObject).blink(5000,false,333,0xFF0000);				(boardCards[2] as GameObject).blink(5000,false,333,0xFF0000);				(boardCards[3] as GameObject).blink(5000,false,333,0xFF0000);				(boardCards[4] as GameObject).blink(5000,false,333,0xFF0000);								winAmount = bid * 50;								display("Straight Flush\nWon "+winAmount+" coins!!");			}			// Check for Four of a Kind		// 25			else if (boardCards[0].getPokerValue() == boardCards[1].getPokerValue() && boardCards[1].getPokerValue() == boardCards[2].getPokerValue() && boardCards[2].getPokerValue() == boardCards[3].getPokerValue())			{				boardCards[0].blink(5000, false, 333, 0xFF0000);				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0xFF0000);								winAmount = bid * 25;								display("Four of a Kind\nWon "+winAmount+" coins!!");			}			else if (boardCards[1].getPokerValue() == boardCards[2].getPokerValue() && boardCards[2].getPokerValue() == boardCards[3].getPokerValue() && boardCards[3].getPokerValue() == boardCards[4].getPokerValue())			{				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0xFF0000);				boardCards[4].blink(5000, false, 333, 0xFF0000);								winAmount = bid * 25;								display("Four of a Kind\nWon "+winAmount+" coins!!");			}			// Check for Full House			// 6			else if (((boardCards[0].getPokerValue() == boardCards[1].getPokerValue() && boardCards[1].getPokerValue() == boardCards[2].getPokerValue()) && (boardCards[3].getPokerValue() == boardCards[4].getPokerValue())) ||					 ((boardCards[0].getPokerValue() == boardCards[1].getPokerValue()) && (boardCards[2].getPokerValue() == boardCards[3].getPokerValue() && boardCards[3].getPokerValue() == boardCards[4].getPokerValue())))			{				boardCards[0].blink(5000, false, 333, 0xFF0000);				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0xFF0000);				boardCards[4].blink(5000, false, 333, 0xFF0000);								winAmount = bid * 6;								display("Full House\nWon "+winAmount+" coins!!");			}			// Check for Flush				// 5			else if (boardCards[0].suit == boardCards[1].suit && boardCards[1].suit == boardCards[2].suit && boardCards[2].suit == boardCards[3].suit && boardCards[3].suit == boardCards[4].suit)			{				boardCards[0].blink(5000, false, 333, 0xFF0000);				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0xFF0000);				boardCards[4].blink(5000, false, 333, 0xFF0000);								winAmount = bid * 5;								display("Flush\nWon "+winAmount+" coins!!");			}			// Check for Straight			// 4			else if ((boardCards[0].number == "0" && boardCards[1].number == "J" && boardCards[2].number == "Q" && boardCards[3].number == "K" && boardCards[4].number == "A") ||					 (boardCards[0].number == "A" && boardCards[1].number == "2" && boardCards[2].number == "3" && boardCards[3].number == "4" && boardCards[4].number == "5") ||					 (boardCards[0].getPokerValue() == boardCards[1].getPokerValue()-1 && boardCards[0].getPokerValue() == boardCards[2].getPokerValue()-2 && boardCards[0].getPokerValue() == boardCards[3].getPokerValue()-3 && boardCards[0].getPokerValue() == boardCards[4].getPokerValue()-4))			{				boardCards[0].blink(5000, false, 333, 0xFF0000);				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0xFF0000);				boardCards[4].blink(5000, false, 333, 0xFF0000);								winAmount = bid * 4;								display("Straight\nWon "+winAmount+" coins!!");			}			// Check for Three of a Kind	// 3			else if (boardCards[0].getPokerValue() == boardCards[1].getPokerValue() && boardCards[1].getPokerValue() == boardCards[2].getPokerValue())			{				boardCards[0].blink(5000, false, 333, 0xFF0000);				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0xFF0000);								winAmount = bid * 3;								display("Three of a Kind\nWon "+winAmount+" coins!!");			}			else if (boardCards[1].getPokerValue() == boardCards[2].getPokerValue() && boardCards[2].getPokerValue() == boardCards[3].getPokerValue())			{				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0xFF0000);								winAmount = bid * 3;								display("Three of a Kind\nWon "+winAmount+" coins!!");			}			else if (boardCards[2].getPokerValue() == boardCards[3].getPokerValue() && boardCards[3].getPokerValue() == boardCards[4].getPokerValue())			{				boardCards[2].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0xFF0000);				boardCards[4].blink(5000, false, 333, 0xFF0000);								winAmount = bid * 3;								display("Three of a Kind\nWon "+winAmount+" coins!!");			}			// Check for Two Pair			// 2			else if ((boardCards[0].getPokerValue() == boardCards[1].getPokerValue()) &&					 (boardCards[2].getPokerValue() == boardCards[3].getPokerValue()))			{				boardCards[0].blink(5000, false, 333, 0xFF0000);				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0x00FF00);				boardCards[3].blink(5000, false, 333, 0x00FF00);								winAmount = bid * 2;								display("Two Pair\nWon "+winAmount+" coins!!");			}			else if ((boardCards[0].getPokerValue() == boardCards[1].getPokerValue()) &&					 (boardCards[3].getPokerValue() == boardCards[4].getPokerValue()))			{				boardCards[0].blink(5000, false, 333, 0xFF0000);				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0x00FF00);				boardCards[4].blink(5000, false, 333, 0x00FF00);								winAmount = bid * 2;								display("Two Pair\nWon "+winAmount+" coins!!");			}			else if ((boardCards[1].getPokerValue() == boardCards[2].getPokerValue()) &&					 (boardCards[3].getPokerValue() == boardCards[4].getPokerValue()))			{				boardCards[1].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0x00FF00);				boardCards[4].blink(5000, false, 333, 0x00FF00);								winAmount = bid * 2;								display("Two Pair\nWon "+winAmount+" coins!!");			}			// Check for Jacks				// 1			else if (boardCards[4].getPokerValue() > 10 && boardCards[3].getPokerValue() == boardCards[4].getPokerValue())			{				boardCards[4].blink(5000, false, 333, 0xFF0000);				boardCards[3].blink(5000, false, 333, 0xFF0000);								winAmount = bid;								if (boardCards[4].getPokerValue() == 11) display("Jacks!\nWon "+winAmount+" coins!!");				if (boardCards[4].getPokerValue() == 12) display("Queens!\nWon "+winAmount+" coins!!");				if (boardCards[4].getPokerValue() == 13) display("Kings!\nWon "+winAmount+" coins!!");				if (boardCards[4].getPokerValue() == 14) display("ACES!\nWon "+winAmount+" coins!!");			}			else if (boardCards[3].getPokerValue() > 10 && boardCards[2].getPokerValue() == boardCards[3].getPokerValue())			{				boardCards[3].blink(5000, false, 333, 0xFF0000);				boardCards[2].blink(5000, false, 333, 0xFF0000);								winAmount = bid;								if (boardCards[3].getPokerValue() == 11) display("Jacks!\nWon "+winAmount+" coins!!");				if (boardCards[3].getPokerValue() == 12) display("Queens!\nWon "+winAmount+" coins!!");				if (boardCards[3].getPokerValue() == 13) display("Kings!\nWon "+winAmount+" coins!!");				if (boardCards[3].getPokerValue() == 14) display("ACES!\nWon "+winAmount+" coins!!");			}			else if (boardCards[2].getPokerValue() > 10 && boardCards[1].getPokerValue() == boardCards[2].getPokerValue())			{				boardCards[2].blink(5000, false, 333, 0xFF0000);				boardCards[1].blink(5000, false, 333, 0xFF0000);								winAmount = bid;								if (boardCards[2].getPokerValue() == 11) display("Jacks!\nWon "+winAmount+" coins!!");				if (boardCards[2].getPokerValue() == 12) display("Queens!\nWon "+winAmount+" coins!!");				if (boardCards[2].getPokerValue() == 13) display("Kings!\nWon "+winAmount+" coins!!");				if (boardCards[2].getPokerValue() == 14) display("ACES!\nWon "+winAmount+" coins!!");			}			else if (boardCards[0].getPokerValue() > 10 && boardCards[1].getPokerValue() == boardCards[0].getPokerValue())			{				boardCards[0].blink(5000, false, 333, 0xFF0000);				boardCards[1].blink(5000, false, 333, 0xFF0000);								winAmount = bid;								if (boardCards[0].getPokerValue() == 11) display("Jacks!\nWon "+winAmount+" coins!!");				if (boardCards[0].getPokerValue() == 12) display("Queens!\nWon "+winAmount+" coins!!");				if (boardCards[0].getPokerValue() == 13) display("Kings!\nWon "+winAmount+" coins!!");				if (boardCards[0].getPokerValue() == 14) display("ACES!\nWon "+winAmount+" coins!!");			}						if (winAmount > 0)			{				SoundEngine.PlaySound("Coins",0,coinsReceived);			}			else checkForAchievement();		}		private function coinsReceived(e:* = null)		{			var achieve:String = Net.Get("achievement");			if (achieve != null)			{				MessageBox.Achievement("ACHIEVEMENT EARNED:\nFirst Poker Play", onAchieveOKFromCoins);			}			else onAchieveOKFromCoins();		}		private function onAchieveOKFromCoins(e:* = null)		{			Net.AddAction("action","win");			Net.AddAction("rollID",String(rollID));			Net.AddAction("bid",String(bid));			Net.AddAction("result",String(rollResult));			Net.AddAction("winAmount",String(winAmount));			Net.Send(onWinConfirmation);		}		private function checkForAchievement(e:* = null)		{			var achieve:String = Net.Get("achievement");			if (achieve != null)			{				MessageBox.Achievement("ACHIEVEMENT EARNED:\nFirst Poker Play", finishWinConfirmation);			}			else finishWinConfirmation(e);		}		private function display(s:String)		{			var t:TextObject = new TextObject();			var tf:TextFormat = new TextFormat("Bangla", 72, 0xFFFFFF, true, null, null, null, null, TextFormatAlign.CENTER);			t.setText(s);			t.setTextFormat(tf);			t.filters = [new GlowFilter(0x0000FF,1.0,12.0,12.0,2,1,false,false)];						// 200, 280			addChild(t);			t.x = 50;			t.y = 220;			t.width = 620;						t.moveTo(50,0,3000,killMe);			t.fadeTo(0.0,3000);		}		private function sort(a:Array)		{			if (a.length < 2) return;						for (var n:int = 0; n < a.length-1; n++)			{				for (var t:int = n+1; t<a.length; t++)				{					if (a[n].getPokerValue() > a[t].getPokerValue())					{						var c:Card = a[n] as Card;						a[n] = a[t];						a[t] = c;					}				}			}		}		private function onWinConfirmation(e:Event)		{						var error:String = Net.Get("error");			if (error != null && error.length > 0)			{				MessageBox.Okay(error);				finishWinConfirmation();			}						var win:int = int(Net.Get("coins"));			Game.SetVirtualCoins(win);						finishWinConfirmation();		}		private function finishWinConfirmation(e:* = null)		{			if (winAmount == 0)			{				var minigame:int = int(Net.Get("minigame"));				if (minigame == 1)				{					Game.Message("Loading profiles for minigame...");										minigamePanel = new MinigameSelector(bid, onMinigameClose);					addChild(minigamePanel);										minigamePanel.x = 800;					minigamePanel.moveTo(0, 0, 1000);				}				else				{					isPlayDone = true;					if (isLoadDone) enableButtons();				}			}			else			{				isPlayDone = true;				if (isLoadDone) enableButtons();			}			loadNewProfiles();		}		private function onMinigameClose(e:* = null)		{			isPlayDone = true;			if (isLoadDone) enableButtons();			removeChild(minigamePanel);		}		private function disableButtons()		{			backBtn.Disable();			reset.Disable();			minus1.Disable();			minus5.Disable();			minus10.Disable();			minus25.Disable();			plus1.Disable();			plus5.Disable();			plus10.Disable();			plus25.Disable();			playBtn.Disable();		}		private function enableButtons()		{			backBtn.Enable();			reset.Enable();			minus1.Enable();			minus5.Enable();			minus10.Enable();			minus25.Enable();			plus1.Enable();			plus5.Enable();			plus10.Enable();			plus25.Enable();			playBtn.Enable();		}		private function onReset() { setBid(1); }		private function onMinus1() { setBid(bid-1); }		private function onMinus5() { setBid(bid-5); }		private function onMinus10() { setBid(bid-10); }		private function onMinus25() { setBid(bid-25); }		private function onPlus1() { setBid(bid+1); }		private function onPlus5() { setBid(bid+5); }		private function onPlus10() { setBid(bid+10); }		private function onPlus25() { setBid(bid+25); }		private function setBid(n:int)		{			bid = n;			if (bid < 10) bid = 10;			if (bid > 100) bid = 100;			if (bid > Game.GetVirtualCoins()) 			{				if (Game.GetVirtualCoins() == 0)				{					//TODO: Message box that says you're out of currency ...				}				else bid = Game.GetVirtualCoins();			}			bidText.setText(String(bid));			bidText.setTextFormat(bidTextFormat);		}	}	}