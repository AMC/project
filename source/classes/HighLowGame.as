package classes{	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.net.URLLoader;	import flash.net.URLRequest;		public class HighLowGame extends Minigame	{		private var profileIndexes:Array;		private var currentProfileIndex:int;		private var cards:Array;		private var highLow:int = -1;		private var numCardsOnBoard:int = 0;				private var curValue:int = 0;		private var prevValue:int = 0;				private var callback:Function;				private var isLoadDone:Boolean = false;				private var bg:GameObject;		private var bid:int;		private var bidText:TextObject;		private var bidTextTF:TextFormat;				private var bidMsgText:TextObject;		private var bidMsgTextTF:TextFormat;				private var numFlipped:int = 0;		private var first:Card;		private var second:Card;		private var numWon:int = 0;				private var highArrow:GameObject;		private var lowArrow:GameObject;				private var objOver:Card;				private var net:URLLoader;		public function HighLowGame(bid:int, onCloseCallback:Function) 		{			this.bid = bid;			callback = onCloseCallback;						profileIndexes = new Array();			cards = new Array();						highArrow = Game.GetClass("HighLowSelector") as GameObject;			lowArrow = Game.GetClass("HighLowSelector") as GameObject;			lowArrow.rotationZ = 180;			lowArrow.scaleX = -1;						highArrow.addEventListener(MouseEvent.ROLL_OVER, onHighRollOver);			highArrow.addEventListener(MouseEvent.ROLL_OUT, onHighRollOut);			highArrow.addEventListener(MouseEvent.MOUSE_DOWN, onHighDown);			highArrow.addEventListener(MouseEvent.MOUSE_UP, onHighUp);			lowArrow.addEventListener(MouseEvent.ROLL_OVER, onLowRollOver);			lowArrow.addEventListener(MouseEvent.ROLL_OUT, onLowRollOut);			lowArrow.addEventListener(MouseEvent.MOUSE_DOWN, onLowDown);			lowArrow.addEventListener(MouseEvent.MOUSE_UP, onLowUp);						bg = Game.GetClass("MinigameBackground") as GameObject;			bidText = new TextObject();			bidTextTF = new TextFormat("Impact", 48, 0xFFFFFF, null, null, null, null, null, TextFormatAlign.CENTER);			bidText.setText(bid + "");			bidText.setTextFormat(bidTextTF);						bidMsgText = new TextObject();			bidMsgTextTF = new TextFormat("Impact", 32, 0xFFFFFF, null, null, null, null, null, TextFormatAlign.CENTER);			bidMsgText.setText("Current Bid");			bidMsgText.setTextFormat(bidMsgTextTF);						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event)		{			this.removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						addChild(bg);			addChild(bidText);			addChild(bidMsgText);						bidText.setRectangle(61,16,280,54);			bidMsgText.setRectangle(61,-20,280,48);						loadProfiles();		}				private function loadProfiles(e:* = null)		{			isLoadDone = false;						profileIndexes = [];			profileIndexes[0] = 0;						for (var n:int = 1; n < 13; n++)			{				var found:Boolean = false;				var pI:int = int(Math.random()*(Game.Profiles.length-2))+1								for (var t:int = 1; t < profileIndexes.length; t++)					if (profileIndexes[t] == pI)						found = true;										if (!found)					profileIndexes[n] = pI;				else n--;			}						cards = [];			var deck:String = "A234567890JQKA234567890JQKA234567890JQKA234567890JQK";						for (n = 0; n < 13; n++)			{				var c1:Card = new Card(Game.Profiles.Get(profileIndexes[n]));				var c2:Card = new Card(Game.Profiles.Get(profileIndexes[n]));				var c3:Card = new Card(Game.Profiles.Get(profileIndexes[n]));				var c4:Card = new Card(Game.Profiles.Get(profileIndexes[n]));								c1.setCard("1",deck.charAt(n)); cards[n] = c1;				c2.setCard("2",deck.charAt(n)); cards[n+13] = c2;				c3.setCard("3",deck.charAt(n)); cards[n+26] = c3;				c4.setCard("4",deck.charAt(n)); cards[n+39] = c4;			}						currentProfileIndex = int(Math.random()*52);			addChild(cards[currentProfileIndex]);			cards[currentProfileIndex].setPosition(900,900);			(cards[currentProfileIndex] as Card).moveTo(360, 140, 300, onFirstCardInPosition);			SoundEngine.PlaySound(SoundEngine.SWOOSH);		}				private function onHighRollOver(e:MouseEvent) { highArrow.filters = [new GlowFilter(0xFFFFFF, 1.0, 12.0, 12.0, 3, 1)]; }		private function onHighRollOut(e:MouseEvent) { highArrow.filters = []; }		private function onHighDown(e:MouseEvent) { highArrow.filters = [new GlowFilter(0x000000, 0.6, 50.0, 50.0, 2, 1, true)]; }		private function onLowRollOver(e:MouseEvent) { lowArrow.filters = [new GlowFilter(0xFFFFFF, 1.0, 12.0, 12.0, 3, 1)]; }		private function onLowRollOut(e:MouseEvent) { lowArrow.filters = []; }		private function onLowDown(e:MouseEvent) { lowArrow.filters = [new GlowFilter(0x000000, 0.6, 50.0, 50.0, 2, 1, true)]; }		private function onHighUp(e:MouseEvent) { highLow = 1; checkPlay(); }		private function onLowUp(e:MouseEvent) { highLow = 0; checkPlay(); }		private function checkPlay(e:* = null)		{			highArrow.filters = lowArrow.filters = [];						(cards[currentProfileIndex] as Card).flip(200, checkWin);			SoundEngine.PlaySound(SoundEngine.FLIP);						removeChild(highArrow);			removeChild(lowArrow);		}		private function checkWin(e:* = null)		{			var cur:int = curValue;			var prev:int = prevValue;						if ((cur > prev && highLow == 1) || (cur < prev && highLow == 0))			{				var amountWon = bid * numCardsOnBoard;				if (numCardsOnBoard == 5) amountWon *= 2;								display(amountWon + " coins won!!");								Net.AddAction("action","minigame");				Net.AddAction("winAmount",String(amountWon));				Net.Send();								Game.SetVirtualCoins(Game.GetVirtualCoins()+(amountWon));				SoundEngine.PlaySound(SoundEngine.COINS,0,numCardsOnBoard==5?onClose:null);								if (numCardsOnBoard == 5) return;								getNewIndex();								prevValue = curValue;				curValue = cards[currentProfileIndex].getPokerValue();				addChild(cards[currentProfileIndex]);				(cards[currentProfileIndex] as Card).setPosition(900,900);				var newX:int = numCardsOnBoard==2?484:numCardsOnBoard==3?286:numCardsOnBoard==4?161:0;				var newY:int = numCardsOnBoard==2?360:numCardsOnBoard==3?398:numCardsOnBoard==4?287:0;				(cards[currentProfileIndex] as Card).moveTo(newX, newY, 300, onCardInPosition);				SoundEngine.PlaySound(SoundEngine.SWOOSH);				numCardsOnBoard++;			}			else			{				// We lost!!				SoundEngine.PlaySound(SoundEngine.BUZZER,100,onClose);			}		}		private function onClose(e:* = null)		{			for (var n:int = 0; n < cards.length; n++) { cards[n].Destroy(); cards[n] = null; }			callback();		}				private function display(s:String)		{			var t:TextObject = new TextObject();			var tf:TextFormat = new TextFormat("Bangla", 72, 0xFFFFFF, true, null, null, null, null, TextFormatAlign.CENTER);			t.setText(s);			t.setTextFormat(tf);			t.filters = [new GlowFilter(0x0000FF,1.0,12.0,12.0,2,1,false,false)];						// 200, 280			Game.systemLayer.addChild(t);			t.x = 50;			t.y = 220;			t.width = 620;						t.moveTo(50,0,3000,killMe);			t.fadeTo(0.0,3000);		}		private function killMe(e:* = null)		{			var o:GameObject = e as GameObject;			if (Game.systemLayer.contains(o)) Game.systemLayer.removeChild(o);			o.Destroy();			o = null;		}		private function onFirstCardInPosition(e:* = null)		{			curValue = cards[currentProfileIndex].getPokerValue();			(cards[currentProfileIndex] as Card).flip(200);			SoundEngine.PlaySound(SoundEngine.FLIP);			numCardsOnBoard = 2;			getNewIndex();			prevValue = curValue;			curValue = cards[currentProfileIndex].getPokerValue();			addChild(cards[currentProfileIndex]);			(cards[currentProfileIndex] as Card).setPosition(900,900);			(cards[currentProfileIndex] as Card).moveTo(540, 216, 300, onCardInPosition);			SoundEngine.PlaySound(SoundEngine.SWOOSH);		}		private function getNewIndex(e:* = null)		{			currentProfileIndex = int(Math.random()*52);						if (contains(cards[currentProfileIndex])) getNewIndex();			for (var n:int = 0; n < cards.length; n++)			{				if (contains(cards[n]) && (cards[n] as Card).getPokerValue() == (cards[currentProfileIndex] as Card).getPokerValue()) getNewIndex();			}		}		private function onCardInPosition(e:* = null)		{			addChild(highArrow);			addChild(lowArrow);			highArrow.alpha = lowArrow.alpha = 0;			highArrow.x = cards[currentProfileIndex].x - 20 - cards[currentProfileIndex].width/2;			highArrow.y = cards[currentProfileIndex].y - 20 - cards[currentProfileIndex].height/2;			lowArrow.x = cards[currentProfileIndex].x + cards[currentProfileIndex].width - lowArrow.width + 20 - cards[currentProfileIndex].width/2;			lowArrow.y = cards[currentProfileIndex].y + cards[currentProfileIndex].height + 20 - cards[currentProfileIndex].height/2;			highArrow.fadeTo(1.0,200);			lowArrow.fadeTo(1.0,200);		}	}	}