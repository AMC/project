package classes{	import flash.display.Loader;	import flash.events.Event;	import flash.net.URLRequest;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Rectangle;	import flash.geom.Matrix;	import flash.geom.Point;	import flash.system.LoaderContext;	import flash.display.LoaderInfo;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.filters.GlowFilter;	import flash.text.TextFormatAlign;	import flash.text.TextFieldAutoSize;		public class Card extends GameObject {		public var Name:String;		public var ID:String;		public var ImageURL:String;		private var front:GameObject;		private var back:GameObject;		private var stopper:GameObject;		private var loadingSpinner:GameObject;				public var suit:String;		private var suit1:GameObject;		private var suit2:GameObject;				public var number:String;		private var number1:TextObject;		private var number2:TextObject;				private var nameText:TextObject;		private var nameTF:TextFormat;		private var nameGlow:GlowFilter;		private var loader:Loader;				public var isFlipped:Boolean = false;		public var isLoaded:Boolean = false;		public var isLoading:Boolean = false;		public var isDefault:Boolean = false;		public var isFaceCard:Boolean = false;		public function Card(profile:ProfileNode=null)		{			front = Game.GameMode=="Slots"?Game.GetClass("Stop") as GameObject:Game.GetClass("CardFront") as GameObject;			back = Game.GameMode=="Slots"?Game.GetClass("Stop") as GameObject:Game.GetClass("CardBack") as GameObject;			loadingSpinner = Game.GetClass("LoadingSpinner");			nameText = new TextObject();			nameTF = new TextFormat("Impact",18,0xFFFFFF,null,null,null,null,null,TextFormatAlign.CENTER);			nameGlow = new GlowFilter(0x0000FF);						nameText.setAutoSize(TextFieldAutoSize.CENTER);			nameText.setTextFormat(nameTF);			nameText.filters = [nameGlow];						addChild(front);			while (loadingSpinner.width > front.width) loadingSpinner.scaleX -= 0.01;			while (loadingSpinner.height > front.height) loadingSpinner.scaleY -= 0.01;						if (Game.GameMode != "Slots") loadingSpinner.setPosition(-loadingSpinner.width/2,-loadingSpinner.height/2);			else loadingSpinner.setPosition(front.width/2 - loadingSpinner.width/2, front.height/2 - loadingSpinner.height/2);			front.addChild(loadingSpinner);						if (Game.GameMode != "Slots") 			{				addChild(back);							front.scaleX = -1;				nameText.scaleX = -1;			}						addEventListener(MouseEvent.ROLL_OVER, onRollOver);			addEventListener(MouseEvent.ROLL_OUT, onRollOut);						if (profile == null) return;						// Pull the profile data...			Name = profile.Name;			ID = profile.ID;			ImageURL = profile.ImageURL;						//loadImage(profile.GetBitmap());			LoadProfile();					}		public function LoadProfile()		{			if (isLoading || isLoaded) return;						Game.Message("Loading profile data from Facebook...please wait...");						isLoading = true;						loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onUrlLoaded);			var lc:LoaderContext = new LoaderContext();			lc.checkPolicyFile = true;			loader.load(new URLRequest(ImageURL), lc);		}		private function onUrlLoaded(event:Event)		{			// CODE OBTAINED FROM http://www.stevensacks.net/2008/12/23/solution-as3-security-error-2122-with-300-redirects/			// to solve the Security Error 2122 given by Facebook!			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onUrlLoaded);						var path:String = LoaderInfo(event.target).url;						// Check if we're a default profile image...			if (path == "http://profile.ak.fbcdn.net/static-ak/rsrc.php/v1/yL/r/HsTZSDw4avx.gif?type=large")			{				isDefault = true;			}					loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onReallyComplete);			var lc:LoaderContext = new LoaderContext();			lc.checkPolicyFile = true;						loader.load(new URLRequest(path), lc);		}		private function onReallyComplete(event:Event)		{			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onReallyComplete);						loader.rotationY = 0;						var w:int = Game.GameMode == "Slots" ? 112 : 100;			var h:int = Game.GameMode == "Slots" ? 112 : 144;						while (loader.width > w)			{				loader.scaleX -= 0.001;				loader.scaleY -= 0.001;			}			while (loader.height > h)			{				loader.scaleX -= 0.001;				loader.scaleY -= 0.001;			};			loader.x = Game.GameMode == "Slots" ? front.width/2 - loader.width/2 : 0 - loader.width/2;			loader.y = Game.GameMode == "Slots" ? front.height/2 - loader.height/2 : 0 - loader.height/2;			front.addChild(loader);			if (front.contains(loadingSpinner)) front.removeChild(loadingSpinner);						if (number1 != null && front.contains(number1)) front.setChildIndex(number1,front.numChildren-1);			if (number2 != null && front.contains(number2)) front.setChildIndex(number2,front.numChildren-1);			if (suit1 != null && front.contains(suit1)) front.setChildIndex(suit1,front.numChildren-1);			if (suit2 != null && front.contains(suit2)) front.setChildIndex(suit2,front.numChildren-1);						isLoaded = true;			isLoading = false;		}				public function setAsCard()		{			front = Game.GetClass("CardFront") as GameObject;			back = Game.GetClass("CardBack") as GameObject;						while (this.numChildren > 0) this.removeChildAt(0);						addChild(front);			addChild(back);						front.scaleX = -1;			nameText.scaleX = -1;		}		public function setAsStopper()		{			stopper = Game.GetClass("MatchStopper") as GameObject;						front.scaleX = 1;						front.addChild(stopper);			if (front.contains(loadingSpinner)) front.removeChild(loadingSpinner);			//stopper.x -= 50;			//stopper.y -= stopper.height/2;			ID = "Stopper";						front.scaleX = -1;						isLoaded = true;			isLoading = false;			isDefault = false;		}		public function setProfile(Name:String, ID:String)		{			this.Name = Name;			this.ID = ID;						nameText.setText(Name);			nameText.setTextFormat(nameTF);		}		public function setCard(suit:String,number:String)		{			if (isFaceCard) return;			isFaceCard = true;						this.suit = suit;			this.number = number;						switch(suit)			{				case "1": 					suit1 = Game.GetClass("Heart") as GameObject;					suit2 = Game.GetClass("Heart") as GameObject;					break;				case "2":					suit1 = Game.GetClass("Diamond") as GameObject;					suit2 = Game.GetClass("Diamond") as GameObject;					break;				case "3":					suit1 = Game.GetClass("Spade") as GameObject;					suit2 = Game.GetClass("Spade") as GameObject;					break;				case "4":					suit1 = Game.GetClass("Club") as GameObject;					suit2 = Game.GetClass("Club") as GameObject;					break;			}						number1 = new TextObject();			number2 = new TextObject();			number1.setDimensions(40,28);			number2.setDimensions(40,28);			number1.setText(number=="0"?"10":number);			number2.setText(number=="0"?"10":number);						var tf1:TextFormat = new TextFormat("Bangla",20,(suit=="1"||suit=="2")?0xFF0000:0x000000,null,null,null,null,null,TextFormatAlign.CENTER);			number1.setTextFormat(tf1);			number2.setTextFormat(tf1);						front.addChild(number1);			front.addChild(number2);			front.addChild(suit1);			front.addChild(suit2);						var whiteFilter:GlowFilter = new GlowFilter(0xFFFFFF, 1.0, 4.0, 4.0, 10.0, 1, false);						suit1.filters = suit2.filters = number1.filters = number2.filters = [whiteFilter];						suit1.setPosition(front.x - 50, front.y - 72);						number1.setPosition(suit1.getX() + suit1.getWidth()/2 - number1.getWidth()/2,								suit1.getY() + suit1.getHeight() + 2);						suit2.setScale(-1);			suit2.setPosition(front.x + 50, front.y + 72);						number2.setScale(-1);			number2.setPosition(suit2.getX() + suit2.getWidth()/2 - number2.getWidth()/2 + 20,								suit2.getY() - number2.getHeight() + 5);		}		public function flipCard()		{			if (!isFlipped)			{				setChildIndex(front, numChildren-1);				isFlipped = true;			}			else			{				setChildIndex(back, numChildren-1);				isFlipped = false;			}		}		public function getPokerValue():int		{			if (number=="2") return 2;			if (number=="3") return 3;			if (number=="4") return 4;			if (number=="5") return 5;			if (number=="6") return 6;			if (number=="7") return 7;			if (number=="8") return 8;			if (number=="9") return 9;			if (number=="0") return 10;			if (number=="J") return 11;			if (number=="Q") return 12;			if (number=="K") return 13;			if (number=="A") return 14;			else return 0;		}		public function getBlackJackValue():int		{			if (number=="2") return 2;			if (number=="3") return 3;			if (number=="4") return 4;			if (number=="5") return 5;			if (number=="6") return 6;			if (number=="7") return 7;			if (number=="8") return 8;			if (number=="9") return 9;			if (number=="0") return 10;			if (number=="J") return 10;			if (number=="Q") return 10;			if (number=="K") return 10;			if (number=="A") return 1;			else return 0;		}				private function onRollOver(e:Event)		{			if (!contains(back) || getChildIndex(front) > getChildIndex(back))			{				nameText.setPosition(nameText.getTextWidth()/2,									 nameText.getTextHeight()/2 + 32);				addChild(nameText);			}		}		private function onRollOut(e:Event)		{			if (contains(nameText)) removeChild(nameText);		}				public override function Destroy()		{			super.Destroy();						//if (front.contains(loader)) front.removeChild(loader);			//if (front.contains(stopper)) front.removeChild(stopper);			//if (front.contains(loadingSpinner)) front.removeChild(loadingSpinner);			//if (contains(front)) removeChild(front);			//if (contains(back)) removeChild(back);						if (loadingSpinner != null) { loadingSpinner.Destroy(); loadingSpinner = null; }			if (front != null) { front.Destroy(); front = null; }			if (back != null) { back.Destroy(); back = null; }			if (stopper != null) { stopper.Destroy(); stopper = null; }			if (suit1 != null) { suit1.Destroy(); suit1 = null; }			if (suit2 != null) { suit2.Destroy(); suit2 = null; }			if (number1 != null) { number1.Destroy(); number1 = null; }			if (number2 != null) { number2.Destroy(); number2 = null; }			if (nameText != null) { nameText.Destroy(); nameText = null; }			if (nameTF != null) { nameTF = null; }			if (nameGlow != null) { nameGlow = null; }			if (loader != null) { loader = null; }						removeEventListener(MouseEvent.ROLL_OVER, onRollOver);			removeEventListener(MouseEvent.ROLL_OUT, onRollOut);		}	}	}