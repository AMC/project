package classes{	import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.net.URLLoader;	import flash.text.TextFormatAlign;	import flash.geom.Point;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.utils.getTimer;	import flash.filters.GlowFilter;	import flash.filters.BlurFilter;	import flash.events.MouseEvent;		public class SlotsScreen extends GameObject	{		private var bid:int;				private var profileIndexes:Array;				private var bg:GameObject;		private var border:GameObject;		private var overlay:GameObject;		private var bidPlate:GameObject;		private var bidText:TextObject;		private var bidTextFormat:TextFormat;				private var minus1:Button;		private var minus5:Button;		private var minus10:Button;		private var minus25:Button;		private var plus1:Button;		private var plus5:Button;		private var plus10:Button;		private var plus25:Button;		private var reset:Button;		private var playBtn:Button;				private var backBtn:Button;				private var tumbler1:GameObject;		private var tumbler2:GameObject;		private var tumbler3:GameObject;		private var tumbler1Blurred:GameObject;		private var tumbler2Blurred:GameObject;		private var tumbler3Blurred:GameObject;		private var tumblerContainer:GameObject;		private var tumblerContainerMask:GameObject;				private var tumbler1Data:Array;		private var tumbler2Data:Array;		private var tumbler3Data:Array;				private var playStartTime:int;				private var rollID:String;		private var rollResult:String;				private var isPlayDone:Boolean = false;		private var isLoadDone:Boolean = false;				private var spinStart:int = 0;				private var minigamePanel:MinigameSelector;		public function SlotsScreen() 		{			// The tumblerXData arrays store the order of the tumblers given by the server			tumbler1Data = new Array();			tumbler2Data = new Array();			tumbler3Data = new Array();			// profileIndexes keeps the array of which profiles have been selected for this game			profileIndexes = new Array();						// Let's initialize all the graphics we need for Slots...			bg = Game.GetClass("SlotsBackground") as GameObject;			border = Game.GetClass("Border") as GameObject;			overlay = Game.GetClass("Overlay") as GameObject;			bidPlate = Game.GetClass("BidPlate") as GameObject;			minus1 = new Button(Button.MINUS1);			minus5 = new Button(Button.MINUS5);			minus10 = new Button(Button.MINUS10);			minus25 = new Button(Button.MINUS25);			plus1 = new Button(Button.PLUS1);			plus5 = new Button(Button.PLUS5);			plus10 = new Button(Button.PLUS10);			plus25 = new Button(Button.PLUS25);			reset = new Button(Button.RESET);			playBtn = new Button(Button.SLOTSPLAY);			backBtn = new Button(Button.BACK_ARROW);			bidText = new TextObject();			bidTextFormat = new TextFormat("Impact",48,0xFFFFFF,null,null,null,null,null, TextFormatAlign.CENTER);			tumblerContainer = new GameObject();			tumblerContainerMask = Game.GetClass("SlotsBackground") as GameObject;						// We're going to add everything to the stage now ... I guess			addChild(playBtn);			addChild(bg);			addChild(tumblerContainer);			addChild(tumblerContainerMask);			addChild(overlay);			addChild(border);			addChild(bidPlate);			bidPlate.addChild(minus1);			bidPlate.addChild(minus5);			bidPlate.addChild(minus10);			bidPlate.addChild(minus25);			bidPlate.addChild(plus1);			bidPlate.addChild(plus5);			bidPlate.addChild(plus10);			bidPlate.addChild(plus25);			bidPlate.addChild(reset);			bidPlate.addChild(bidText);			addChild(backBtn);						playBtn.SetOnClick(onPlay);			reset.SetOnClick(onReset);			minus1.SetOnClick(onMinus1);			minus5.SetOnClick(onMinus5);			minus10.SetOnClick(onMinus10);			minus25.SetOnClick(onMinus25);			plus1.SetOnClick(onPlus1);			plus5.SetOnClick(onPlus5);			plus10.SetOnClick(onPlus10);			plus25.SetOnClick(onPlus25);						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event)		{			// Reset our bid @ 10			setBid(10);						// Disable our buttons until profiles are loaded ...			disableButtons();						// Load our profile data...			profileIndexes = [];			profileIndexes[0] = 0;			for (var n:int = 1; n < 4; n++)			{				var found:Boolean = false;				var pI:int = int(Math.random()*(Game.Profiles.length-2))+1								for (var t:int = 1; t < profileIndexes.length; t++)					if (profileIndexes[t] == pI)						found = true;										if (!found)					profileIndexes[n] = pI;				else n--;			}						tumbler1 = new GameObject();			tumbler2 = new GameObject();			tumbler3 = new GameObject();			tumbler1Blurred = new GameObject();			tumbler2Blurred = new GameObject();			tumbler3Blurred = new GameObject();						tumblerContainer.addChild(tumbler1);			tumblerContainer.addChild(tumbler2);			tumblerContainer.addChild(tumbler3);						tumbler1.setPosition(0,-(10*128));			tumbler2.setPosition(128,-(10*128));			tumbler3.setPosition(256,-(10*128));						var profile:ProfileNode;						for (n = 0; n < Game.Tumbler1.length; n++)			{				var num:int = int(Game.Tumbler1.charAt(n)) - 1;				profile = Game.Profiles.Get(profileIndexes[num]);								var card1:Card = new Card(profile);				var card2:Card = new Card(profile);				var card3:Card = new Card(profile);				var blur1:Card = new Card(profile);				var blur2:Card = new Card(profile);				var blur3:Card = new Card(profile);								tumbler1Data[n] = card1;				tumbler1Data[n+13] = card2;				tumbler1Data[n+26] = card3;								tumbler1.addChild(card1);	tumbler1Blurred.addChild(blur1);				tumbler1.addChild(card2);	tumbler1Blurred.addChild(blur2);				tumbler1.addChild(card3);	tumbler1Blurred.addChild(blur3);								card1.x = blur1.x = 0;	card1.y = blur1.y = n*128;				card2.x = blur2.x = 0;	card2.y = blur2.y = 1280 + n*128;				card3.x = blur3.x = 0;	card3.y = blur3.y = 2560 + n*128;								card1.fadeTo(1.0,500);				card2.fadeTo(1.0,500);				card3.fadeTo(1.0,500);								tumbler1Blurred.filters = [new BlurFilter(0, 64, 1)];			}			for (n = 0; n < Game.Tumbler2.length; n++)			{				num = int(Game.Tumbler2.charAt(n)) - 1;				profile = Game.Profiles.Get(profileIndexes[num]);								card1 = new Card(profile);				card2 = new Card(profile);				card3 = new Card(profile);				blur1 = new Card(profile);				blur2 = new Card(profile);				blur3 = new Card(profile);								tumbler2Data[n] = card1;				tumbler2Data[n+13] = card2;				tumbler2Data[n+26] = card3;								tumbler2.addChild(card1);	tumbler2Blurred.addChild(blur1);				tumbler2.addChild(card2);	tumbler2Blurred.addChild(blur2);				tumbler2.addChild(card3);	tumbler2Blurred.addChild(blur3);								card1.x = blur1.x = 0;	card1.y = blur1.y = n*128;				card2.x = blur2.x = 0;	card2.y = blur2.y = 1280 + n*128;				card3.x = blur3.x = 0;	card3.y = blur3.y = 2560 + n*128;								card1.fadeTo(1.0,500);				card2.fadeTo(1.0,500);				card3.fadeTo(1.0,500);								tumbler2Blurred.filters = [new BlurFilter(0, 64, 1)];			}			for (n = 0; n < Game.Tumbler3.length; n++)			{				num = int(Game.Tumbler3.charAt(n)) - 1;								profile = Game.Profiles.Get(profileIndexes[num]);								card1 = new Card(profile);				card2 = new Card(profile);				card3 = new Card(profile);				blur1 = new Card(profile);				blur2 = new Card(profile);				blur3 = new Card(profile);								tumbler3Data[n] = card1;				tumbler3Data[n+13] = card2;				tumbler3Data[n+26] = card3;								tumbler3.addChild(card1);	tumbler3Blurred.addChild(blur1);				tumbler3.addChild(card2);	tumbler3Blurred.addChild(blur2);				tumbler3.addChild(card3);	tumbler3Blurred.addChild(blur3);								card1.x = blur1.x = 0;	card1.y = blur1.y = n*128;				card2.x = blur2.x = 0;	card2.y = blur2.y = 1280 + n*128;				card3.x = blur3.x = 0;	card3.y = blur3.y = 2560 + n*128;								card1.fadeTo(1.0,500);				card2.fadeTo(1.0,500);				card3.fadeTo(1.0,500);								tumbler3Blurred.filters = [new BlurFilter(0, 64, 1)];			}						tumblerContainer.fadeTo(1.0,500);						playBtn.x = 900;					playBtn.y = 390;			bidPlate.setRandomPosition();			reset.setRandomPosition();			minus1.setRandomPosition();			minus5.setRandomPosition();			minus10.setRandomPosition();			minus25.setRandomPosition();			plus1.setRandomPosition();			plus5.setRandomPosition();			plus10.setRandomPosition();			plus25.setRandomPosition();			backBtn.setRandomPosition();			backBtn.setScale(0.5);			border.x = 27;						border.y = 137;			overlay.x = 60;						overlay.y = 169;			bg.x = 60;							bg.y = 169;			tumblerContainer.x = 60;			tumblerContainer.y = 169;			tumblerContainerMask.x = 60;		tumblerContainerMask.y = 169;			tumbler1.x = 0;						tumbler1.y = -(10 * 128);			tumbler2.x = 128;					tumbler2.y = -(10 * 128);			tumbler3.x = 256;					tumbler3.y = -(10 * 128);			tumblerContainer.mask = tumblerContainerMask;						border.alpha = overlay.alpha = bg.alpha = tumblerContainer.alpha = 0;						bidText.setText(String(bid));			bidText.setTextFormat(bidTextFormat);			bidText.setPosition(64,97 - bidText.getTextHeight()/2);			bidText.setWidth(88);						playBtn.moveTo(450,390, 500, null, 500);			playBtn.rotate("z",-20,500, null, 500);			bidPlate.moveTo(508,94,500);			reset.moveTo(8,33,500);			minus1.moveTo(33,33,500);			minus5.moveTo(33,65,500);			minus10.moveTo(33,97,500);			minus25.moveTo(33,129,500);			plus1.moveTo(160,33,500);			plus5.moveTo(160,65,500);			plus10.moveTo(160,97,500);			plus25.moveTo(160,129,500);			bidText.fadeTo(1.0, 500, null, 500);			backBtn.moveTo(4,530,500);			border.fadeTo(1.0,500);			overlay.fadeTo(1.0,500);			bg.fadeTo(1.0,500);						enableButtons();		}		public function SetBackCallback(f:Function)		{			backBtn.SetOnClick(f);		}		public function Shatter(callback:Function)		{			border.fadeTo(0.0,500);			overlay.fadeTo(0.0,500);			bg.fadeTo(0.0,500);			tumblerContainer.fadeTo(0.0,500);						bidText.fadeTo(0.0,300);			playBtn.moveTo(900,300,300);			bidPlate.moveTo(900, -100, 500);			reset.moveTo(-100, 900, 500);			minus1.moveTo(900, 900, 500);			minus5.moveTo(-100, -100, 500);			minus10.moveTo(900, -100, 500);			minus25.moveTo(-100, 900, 500);			plus1.moveTo(900, 900, 500);			plus5.moveTo(-100, -100, 500);			plus10.moveTo(900, -100, 500);			plus25.moveTo(-100, 900, 500, callback);		}		private function onPlay(e:* = null)		{			isPlayDone = false;						if (Game.GetVirtualCoins() < bid)			{				MessageBox.Okay("Insufficient funds to play.");				return;			}						Game.SetVirtualCoins(Game.GetVirtualCoins() - bid);						disableButtons();						spinStart = getTimer();						playBtn.rotate("z",45,1000,returnPlayBtn);						tumbler1.startSpin(100,tumbler1Blurred,null,0);			tumbler2.startSpin(100,tumbler2Blurred,null,200);			tumbler3.startSpin(100,tumbler3Blurred,null,400);						Net.AddAction("action","play");			Net.AddAction("mode","slots");			Net.AddAction("bid",String(bid));			Net.Send(onPlayReceived);		}		private function returnPlayBtn(o:GameObject)		{			playBtn.rotate("z",-20,200);		}		private function onPlayReceived(e:* = null)		{			if (Net.Contains("<error>"))			{				MessageBox.Okay("Error on play transmit.");				enableButtons();				return;			}						rollID = Net.Get("rollID");			rollResult = Net.Get("result");						checkWin();		}		private function checkWin(e:* = null)		{			var index1:int = int(rollResult.charAt(0));			var index2:int = int(rollResult.charAt(1));			var index3:int = int(rollResult.charAt(2));						if (getTimer() - spinStart < 3000)			{				var spinTimer:Timer = new Timer(20,0);				spinTimer.addEventListener(TimerEvent.TIMER, onSpinTimerCheck);				spinTimer.start();			}			else			{				tumbler1.stopSpin(index1*128,0);				tumbler2.stopSpin(index2*128,200);				tumbler3.stopSpin(index3*128,400,onSpinComplete);			}		}		private function onSpinTimerCheck(e:TimerEvent)		{			if (getTimer() - spinStart < 3000)			{				return;			}			else			{				e.target.stop();				e.target.removeEventListener(TimerEvent.TIMER, onSpinTimerCheck);				e = null;				checkWin();			}		}		private var winAmount:int;		private function onSpinComplete(e:* = null)		{			winAmount = 0;						var index1:int = 1 - int(rollResult.charAt(0));			if (index1 < 0) index1 += 10;			var index2:int = 1 - int(rollResult.charAt(1));			if (index2 < 0) index2 += 10;			var index3:int = 1 - int(rollResult.charAt(2));			if (index3 < 0) index3 += 10;						var raw1:int = int(rollResult.charAt(0));			var raw2:int = int(rollResult.charAt(1));			var raw3:int = int(rollResult.charAt(2));						var indexes:Array = new Array();			indexes = [index1-1,index2-1,index3-1,index1,index2,index3,index1+1,index2+1,index3+1];			for (var n:int = 0; n < 3; n++) if (indexes[n] < 0) indexes[n] += 10;			for (n = 6; n < 9; n++) if (indexes[n] >= 10) indexes[n] -= 10;						var multiplier:int = 0;						if (tumbler1Data[index1].ID == tumbler2Data[index2].ID &&				tumbler2Data[index2].ID == tumbler3Data[index3].ID)			{				var tumblerID:String = tumbler1Data[index1].ID + ": " + tumbler1Data[index1].Name;				var profile1ID:String = Game.Profiles.Get(profileIndexes[index1]).ID + ": " + Game.Profiles.Get(profileIndexes[index1]).Name;				if (tumbler1Data[index1].ID == Game.Profiles.Get(profileIndexes[0]).ID) { winAmount = bid * 240; multiplier = 240; }				if (tumbler1Data[index1].ID == Game.Profiles.Get(profileIndexes[1]).ID) { winAmount = bid * 40; multiplier = 40; }				if (tumbler1Data[index1].ID == Game.Profiles.Get(profileIndexes[2]).ID) { winAmount = bid * 8; multiplier = 8; }				if (tumbler1Data[index1].ID == Game.Profiles.Get(profileIndexes[3]).ID) { winAmount = bid * 2; multiplier = 2; }								display("Won "+winAmount+" coins!");			}			if (winAmount > 0)			{				Net.AddAction("action","win");				Net.AddAction("rollID",String(rollID));				Net.AddAction("bid",String(bid));				Net.AddAction("result",String(rollResult));				Net.AddAction("winAmount",String(winAmount));				Net.AddAction("multiplier",String(multiplier));				Net.Send(onWinConfirmation);			}			else			{				finishWinConfirmation();			}		}		private function display(s:String)		{			var t:TextObject = new TextObject();			var tf:TextFormat = new TextFormat("Bangla", 72, 0xFFFFFF, true, null, null, null, null, TextFormatAlign.CENTER);			t.setText(s);			t.setTextFormat(tf);			t.filters = [new GlowFilter(0x0000FF,1.0,12.0,12.0,2,1,false,false)];						// 200, 280			addChild(t);			t.x = 50;			t.y = 220;			t.width = 620;						t.moveTo(50,0,3000,killMe);			t.fadeTo(0.0,3000);		}		private function killMe(o:GameObject)		{			if (contains(o)) removeChild(o);			o.Destroy();			o = null;		}		private function onWinConfirmation(e:Event = null)		{						var error:String = Net.Get("error");			if (error != null && error.length > 0)			{				MessageBox.Okay(error);				finishWinConfirmation();			}						var win:int = int(Net.Get("coins"));			Game.SetVirtualCoins(win);						var numCoins = (winAmount/bid)*2;			if (numCoins > 20) numCoins = 20;						var curX:int = 0;						finishWinConfirmation();		}		private function finishWinConfirmation(e:* = null)		{			var achieve:String = Net.Get("achievement");			if (achieve != null)			{				MessageBox.Achievement("ACHIEVEMENT EARNED:\nFirst Slots Play", onAchieveOK);			}			else onAchieveOK();					}		private function onAchieveOK(e:* = null)		{			var minigame:int = int(Net.Get("minigame"));			if (minigame == 1)			{				Game.Message("Loading profiles for minigame...");								minigamePanel = new MinigameSelector(bid, onMinigameClose);				addChild(minigamePanel);								minigamePanel.x = 800;				minigamePanel.moveTo(0, 0, 1000);			}			else enableButtons();		}		private function onMinigameClose(e:* = null)		{			enableButtons();						removeChild(minigamePanel);		}								private function disableButtons()		{			backBtn.Disable();			reset.Disable();			minus1.Disable();			minus5.Disable();			minus10.Disable();			minus25.Disable();			plus1.Disable();			plus5.Disable();			plus10.Disable();			plus25.Disable();			playBtn.Disable();		}		private function enableButtons()		{			backBtn.Enable();			reset.Enable();			minus1.Enable();			minus5.Enable();			minus10.Enable();			minus25.Enable();			plus1.Enable();			plus5.Enable();			plus10.Enable();			plus25.Enable();			playBtn.Enable();		}				private function onReset() { setBid(1); }		private function onMinus1() { setBid(bid-1); }		private function onMinus5() { setBid(bid-5); }		private function onMinus10() { setBid(bid-10); }		private function onMinus25() { setBid(bid-25); }		private function onPlus1() { setBid(bid+1); }		private function onPlus5() { setBid(bid+5); }		private function onPlus10() { setBid(bid+10); }		private function onPlus25() { setBid(bid+25); }		private function setBid(n:int)		{			bid = n;			if (bid < 10) bid = 10;			if (bid > 100) bid = 100;			if (bid > Game.GetVirtualCoins()) 			{				if (Game.GetVirtualCoins() == 0)				{					//TODO: Message box that says you're out of currency ...				}				else bid = Game.GetVirtualCoins();			}			bidText.setText(String(bid));			bidText.setTextFormat(bidTextFormat);		}	}	}