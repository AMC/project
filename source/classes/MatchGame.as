package classes{	import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;		public class MatchGame extends Minigame	{		private var profileIndexes:Array;		private var cards:Array;				private var callback:Function;				private var isLoadDone:Boolean = false;				private var bg:GameObject;		private var bid:int;		private var bidText:TextObject;		private var bidTextTF:TextFormat;				private var bidMsgText:TextObject;		private var bidMsgTextTF:TextFormat;				private var numFlipped:int = 0;		private var first:Card;		private var second:Card;		private var numWon:int = 0;				private var objOver:Card;				private var net:URLLoader;				public function MatchGame(bid:int, onCloseCallback:Function) 		{			this.bid = bid;			callback = onCloseCallback;						profileIndexes = new Array();			cards = new Array();						bg = Game.GetClass("MinigameBackground") as GameObject;			bidText = new TextObject();			bidTextTF = new TextFormat("Impact", 48, 0xFFFFFF, null, null, null, null, null, TextFormatAlign.CENTER);			bidText.setText(bid + "");			bidText.setTextFormat(bidTextTF);						bidMsgText = new TextObject();			bidMsgTextTF = new TextFormat("Impact", 32, 0xFFFFFF, null, null, null, null, null, TextFormatAlign.CENTER);			bidMsgText.setText("Current Bid");			bidMsgText.setTextFormat(bidMsgTextTF);						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event)		{			this.removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						addChild(bg);			addChild(bidText);			addChild(bidMsgText);						bidText.setRectangle(61,16,280,54);			bidMsgText.setRectangle(61,-20,280,48);						loadProfiles();		}				private function loadProfiles(e:* = null)		{			isLoadDone = false;						profileIndexes = [];						for (var n:int = 0; n < 7; n++)			{				var found:Boolean = false;				var pI:int = int(Math.random()*(Game.Profiles.length-1));								for (var t:int = 0; t < profileIndexes.length; t++)					if (profileIndexes[t] == pI)						found = true;										if (!found)					profileIndexes[n] = pI;				else n--;			}						cards = [];						for (n = 0; n < profileIndexes.length; n++)			{								var c1:Card = new Card(Game.Profiles.Get(profileIndexes[n]));				var c2:Card = new Card(Game.Profiles.Get(profileIndexes[n]));									cards[n] = c1;				cards[n+7] = c2;			}						var stopper:Card = new Card();			stopper.setAsStopper();							cards[14] = stopper;							cards = arrayShuffle(cards);							DisplayCards();		}		private function DisplayCards(e:* = null)		{			for (var n = 0; n < 15; n++)			{				var c:Card = cards[n] as Card;								addChild(c);								c.x = 800; c.y = 800;								c.addEventListener(MouseEvent.ROLL_OVER, onOver);				c.addEventListener(MouseEvent.ROLL_OUT, onOut);				c.addEventListener(MouseEvent.CLICK, onClick);			}			cards[0].moveTo(141, 176, 1000, null, 0);			cards[1].moveTo(237, 169, 1000, null, 100);			cards[2].moveTo(355, 149, 1000, null, 200);			cards[3].moveTo(484, 102, 1000, null, 300);			cards[4].moveTo(627, 82, 1000, null, 400);			cards[5].moveTo(141, 306, 1000, null, 500);			cards[6].moveTo(237, 299, 1000, null, 600);			cards[7].moveTo(355, 282, 1000, null, 700);			cards[8].moveTo(484, 268, 1000, null, 800);			cards[9].moveTo(627, 250, 1000, null, 900);			cards[10].moveTo(141, 466, 1000, null, 1000);			cards[11].moveTo(237, 450, 1000, null, 1100);			cards[12].moveTo(355, 435, 1000, null, 1200);			cards[13].moveTo(484, 420, 1000, null, 1300);			cards[14].moveTo(627, 400, 1000, null, 1400);			for (n = 0; n < 15; n++)			{				SoundEngine.PlaySound(SoundEngine.SWOOSH,n*100);			}		}		private function onOver(e:MouseEvent)		{			var c:Card = e.target as Card;			objOver = e.target as Card;			c.filters = [new GlowFilter(0xFFFFFF)];		}		private function onOut(e:MouseEvent)		{			var c:Card = e.target as Card;			objOver = null;			c.filters = [];		}		private function onClick(e:MouseEvent)		{			if (numFlipped >= 2) return;						var c:Card = objOver;						if (c.isFlipped) return;						if (numFlipped == 0) first = c;			if (numFlipped == 1) second = c;						numFlipped++;						c.flip(200, checkFlip);			SoundEngine.PlaySound("Flip");						objOver = null;		}		private function checkFlip(e:* = null)		{			if (numFlipped == 1)			{				if (first.ID == "Stopper")				{					numFlipped = 2;					first.blink(2000, false, 333, 0xFFFFFF, onClose);					SoundEngine.PlaySound("Buzzer");				}				return;			}			if (second.ID == "Stopper")			{				numFlipped = 2;				second.blink(2000, false, 333, 0xFFFFFF, onClose);				SoundEngine.PlaySound("Buzzer");				return;			}			if (first.ID == second.ID)			{				first.blink(2000);				second.blink(2000);								numFlipped = 0;				numWon++;				display((numWon*bid)+" coins won!");				SoundEngine.PlaySound("Coins");								Net.AddAction("action","minigame");				Net.AddAction("winAmount",String(numWon*bid));				Net.Send();								Game.SetVirtualCoins(Game.GetVirtualCoins()+(numWon*bid));								if (numWon == 7)				{					numFlipped = 2;					var t:Timer = new Timer(2000,1);					t.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);					t.start();				}			}			else			{				first.flip(200, null, 500);				second.flip(200, onHide, 500);			}		}		private function onHide(e:* = null)		{			numFlipped = 0;		}		private function onTimerComplete(e:TimerEvent)		{			var t:Timer = e.target as Timer;			t.removeEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);			t = null;			e = null;			onClose();		}		private function onClose(e:* = null)		{			for (var n:int = 0; n < cards.length; n++) { cards[n].Destroy(); cards[n] = null; }			callback();		}		private function display(s:String)		{			var t:TextObject = new TextObject();			var tf:TextFormat = new TextFormat("Bangla", 72, 0xFFFFFF, true, null, null, null, null, TextFormatAlign.CENTER);			t.setText(s);			t.setTextFormat(tf);			t.filters = [new GlowFilter(0x0000FF,1.0,12.0,12.0,2,1,false,false)];						// 200, 280			addChild(t);			t.x = 50;			t.y = 220;			t.setWidth(620);						t.moveTo(50,0,3000);			t.fadeTo(0.0,3000,killMe);		}		private function killMe(o:GameObject)		{			if (contains(o)) removeChild(o);			o.Destroy();			o = null;		}				private function arrayShuffle(array_arr:Array):Array		{		   for(var i:Number = 0; i < array_arr.length; i++){			  var randomNum_num = Math.floor(Math.random() * array_arr.length)			  var arrayIndex = array_arr[i];			  array_arr[i] = array_arr[randomNum_num];			  array_arr[randomNum_num] = arrayIndex;		   }		   return array_arr;		}	}	}