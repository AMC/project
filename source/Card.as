package  {	import flash.display.MovieClip;	import flash.display.Loader;	import flash.events.Event;	import flash.net.URLRequest;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.geom.Rectangle;	import flash.geom.Matrix;	import flash.geom.Point;	import flash.system.LoaderContext;	import flash.display.LoaderInfo;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.filters.GlowFilter;	import flash.text.TextFormatAlign;	import flash.text.TextFieldAutoSize;		public class Card extends MovieClip {		public var Name:String;		public var ID:String;				private var profile:ProfileNode;		private var front:MovieClip;		private var back:MovieClip;		private var profileBitmap:Bitmap;		private var stopper:MovieClip;		public var suit:String;		private var suit1:MovieClip;		private var suit2:MovieClip;		public var number:String;		private var number1:TextField;		private var number2:TextField;				private var nameText:TextField;		private var nameTF:TextFormat;		private var nameGlow:GlowFilter;		private var loader:Loader;				public var isFlipped:Boolean = false;		public var isLoaded:Boolean = false;		public function Card(profile:ProfileNode=null)		{			front = Game.GameMode=="Slots"?Game.GetMovieClip("Stop"):Game.GetMovieClip("CardFront");			back = Game.GameMode=="Slots"?Game.GetMovieClip("Stop"):Game.GetMovieClip("CardBack");			nameText = new TextField();			nameTF = new TextFormat("Impact",18,0xFFFFFF,null,null,null,null,null,TextFormatAlign.CENTER);			nameGlow = new GlowFilter(0x0000FF);						nameText.selectable = false;			nameText.autoSize = TextFieldAutoSize.CENTER;			nameText.setTextFormat(nameTF);			nameText.filters = [nameGlow];						addChild(front);			if (Game.GameMode != "Slots") 			{				addChild(back);							front.scaleX = -1;				nameText.scaleX = -1;			}						addEventListener(MouseEvent.ROLL_OVER, onRollOver);			addEventListener(MouseEvent.ROLL_OUT, onRollOut);			addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);						if (profile == null) return;						this.profile = profile;						// Pull the profile data...			Name = profile.Name;			ID = profile.ID;						loadImage(profile.GetBitmap());					}		public function setAsCard()		{			front = Game.GetMovieClip("CardFront");			back = Game.GetMovieClip("CardBack");						while (this.numChildren > 0) this.removeChildAt(0);						addChild(front);			addChild(back);						front.scaleX = -1;			nameText.scaleX = -1;		}		public function setAsStopper()		{			stopper = Game.GetMovieClip("MatchStopper");						front.scaleX = 1;						front.addChild(stopper);			//stopper.x -= 50;			//stopper.y -= stopper.height/2;			ID = "Stopper";						front.scaleX = -1;		}		public function setProfile(Name:String, ID:String)		{			this.Name = Name;			this.ID = ID;						nameText.text = Name;			nameText.setTextFormat(nameTF);		}		public function loadImage(bmp:Bitmap)		{			profileBitmap = bmp;						bmp.rotationY = 0;			bmp.x = Game.GameMode == "Slots" ? 8 : 4;			bmp.y = Game.GameMode == "Slots" ? 8 : 4;						var w:int = Game.GameMode == "Slots" ? 112 : 100;			var h:int = Game.GameMode == "Slots" ? 112 : 144;						while (bmp.width > w)			{				bmp.scaleX -= 0.001;				bmp.scaleY -= 0.001;			}			while (bmp.height > h)			{				bmp.scaleX -= 0.001;				bmp.scaleY -= 0.001;			};			bmp.x = Game.GameMode == "Slots" ? front.width/2 - bmp.width/2 : 0 - bmp.width/2;			bmp.y = Game.GameMode == "Slots" ? front.height/2 - bmp.height/2 : 0 - bmp.height/2;			front.addChild(bmp);						isLoaded = true;		}		public function setCard(suit:String,number:String)		{			this.suit = suit;			this.number = number;						switch(suit)			{				case "1": 					suit1 = Game.GetMovieClip("Heart");					suit2 = Game.GetMovieClip("Heart");						break;				case "2":					suit1 = Game.GetMovieClip("Diamond");					suit2 = Game.GetMovieClip("Diamond");					break;				case "3":					suit1 = Game.GetMovieClip("Spade");					suit2 = Game.GetMovieClip("Spade");					break;				case "4":					suit1 = Game.GetMovieClip("Club");					suit2 = Game.GetMovieClip("Club");					break;			}						number1 = new TextField();			number2 = new TextField();			number1.selectable = number2.selectable = false;			number1.height = 28; number1.width = 40;			number2.height = 28; number2.width = 40;			number1.text = number=="0"?"10":number;			number2.text = number=="0"?"10":number;						var tf:TextFormat = new TextFormat("Bangla",20,(suit=="1"||suit=="2")?0xFF0000:0x000000,null,null,null,null,null,TextFormatAlign.CENTER);			number1.setTextFormat(tf);			number2.setTextFormat(tf);						front.addChild(number1);			front.addChild(number2);			front.addChild(suit1);			front.addChild(suit2);						var whiteFilter:GlowFilter = new GlowFilter(0xFFFFFF, 1.0, 4.0, 4.0, 10.0, 1, false);						suit1.filters = suit2.filters = number1.filters = number2.filters = [whiteFilter];			suit1.scaleX = suit1.scaleY = suit2.scaleX = suit2.scaleY = 1.0;			number1.scaleX = number1.scaleY = number2.scaleX = number2.scaleY = 1.0;						suit1.x = -front.width/2 + 4;			suit1.y = -front.height/2 + 4;						number1.x = suit1.x + suit1.width/2 - number1.width/2;			number1.y = suit1.y + suit1.height + 2;						suit2.scaleY = -1;			suit2.scaleX = -1;			suit2.x = front.width/2 - 8;// - suit2.width/2;			suit2.y = front.height/2 - 8;// - suit2.height/2;						number2.scaleY = -1;			number2.scaleX = -1;			number2.x = suit2.x + suit2.width/2 - number2.width/2 + 20;			number2.y = suit2.y - number2.height + 5;		}		public function flip()		{			if (!isFlipped)			{				setChildIndex(front, numChildren-1);				isFlipped = true;			}			else			{				setChildIndex(back, numChildren-1);				isFlipped = false;			}		}		public function getPokerValue():int		{			if (number=="2") return 2;			if (number=="3") return 3;			if (number=="4") return 4;			if (number=="5") return 5;			if (number=="6") return 6;			if (number=="7") return 7;			if (number=="8") return 8;			if (number=="9") return 9;			if (number=="0") return 10;			if (number=="J") return 11;			if (number=="Q") return 12;			if (number=="K") return 13;			if (number=="A") return 14;			else return 0;		}		public function getBlackJackValue():int		{			if (number=="2") return 2;			if (number=="3") return 3;			if (number=="4") return 4;			if (number=="5") return 5;			if (number=="6") return 6;			if (number=="7") return 7;			if (number=="8") return 8;			if (number=="9") return 9;			if (number=="0") return 10;			if (number=="J") return 10;			if (number=="Q") return 10;			if (number=="K") return 10;			if (number=="A") return 1;			else return 0;		}		public function setLoader(l:Loader) { loader = l; }		public function clone() : Card		{			var c:Card = new Card(profile);			c.setProfile(profile.Name,profile.ID);			return c;		}				private function onUrlLoaded(event:Event)		{			// CODE OBTAINED FROM http://www.stevensacks.net/2008/12/23/solution-as3-security-error-2122-with-300-redirects/			// to solve the Security Error 2122 given by Facebook!						loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onUrlLoaded);			var path:String = LoaderInfo(event.target).url;			loader = new Loader();			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onReallyComplete);			var lc:LoaderContext = new LoaderContext(true);			lc.checkPolicyFile = true;			loader.load(new URLRequest(path), lc);		}		private function onReallyComplete(event:Event)		{			loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onReallyComplete);			isLoaded = true;		}		private function onRollOver(e:Event)		{			if (!contains(back) || getChildIndex(front) > getChildIndex(back))			{				nameText.x = nameText.textWidth/2;				nameText.y = nameText.textHeight/2 + 32;				addChild(nameText);			}		}		private function onRollOut(e:Event)		{			if (contains(nameText)) removeChild(nameText);		}		private function onRemovedFromStage(e:Event)		{			removeEventListener(MouseEvent.ROLL_OVER, onRollOver);			removeEventListener(MouseEvent.ROLL_OUT, onRollOut);			removeEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}	}	}