package  {	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.text.TextFieldAutoSize;		public class MessageBox extends MovieClip	{		//==============================//		// GLOBAL VARIABLES				//		//==============================//				private static var container:MessageBox;		private static var parentContainer:MovieClip;				//==============================//		// GLOBAL FUNCTIONS				//		//==============================//				public static function Okay(message:String, onOkay:Function=null)		{			container.Clear();			container.SetMessage(message);			container.SetOkayButton(onOkay);			container.Show();		}		public static function Achievement(message:String, onOkay:Function = null)		{			container.Clear();			container.SetMessage(message);			container.SetOkayButton(onOkay);			container.SetAchievementIcon();			container.Show();		}				public static function Initialize(ParentContainer:MovieClip)		{			container = new MessageBox();			parentContainer = ParentContainer;		}				//==============================//		// LOCAL MEMBER VARIABLES		//		//==============================//				private var bg:MovieClip;		private var box:MovieClip;		private var achievementIcon:MovieClip;		private var checkBtn:Button;		private var crossBtn:Button;		private var yesBtn:Button;		private var noBtn:Button;		private var messageText:TextField;		private var messageTF:TextFormat;				private var yesCallback:Function;		private var noCallback:Function;		private var okayCallback:Function;		private var cancelCallback:Function;				private var motion:MotionEngine;				//==============================//		// PUBLIC MEMBER FUNCTIONS		//		//==============================//				public function MessageBox()		{			motion = new MotionEngine();						bg = Game.GetMovieClip("Fader");			box = Game.GetMovieClip("MessageBoxPanel");			achievementIcon = Game.GetMovieClip("Trophy");			checkBtn = new Button(Button.CHECK);			crossBtn = new Button(Button.CROSS);			yesBtn = new Button(Button.YES);			noBtn = new Button(Button.NO);						checkBtn.SetOnClick(onOkay);			crossBtn.SetOnClick(onCancel);			yesBtn.SetOnClick(onYes);			noBtn.SetOnClick(onNo);						messageText = new TextField();			messageText.wordWrap = true;			messageText.autoSize = TextFieldAutoSize.CENTER;			messageTF = new TextFormat("Impact",24,0xFFFFFF,null,null,null,null,null,TextFormatAlign.CENTER);						addChild(bg);			addChild(box);						box.x = 96;			box.y = 134;		}		public function Clear()		{			messageText.text = "";			if (contains(checkBtn)) removeChild(checkBtn);			if (contains(crossBtn)) removeChild(crossBtn);			if (contains(yesBtn)) removeChild(yesBtn);			if (contains(noBtn)) removeChild(noBtn);						if (contains(achievementIcon)) removeChild(achievementIcon);						yesCallback = null;			noCallback = null;			okayCallback = null;			cancelCallback = null;		}		public function SetMessage(s:String)		{			//messageText.text = s;			messageText.htmlText = s;			messageText.setTextFormat(messageTF);						if (!contains(messageText))			{				addChild(messageText);				messageText.x = 104;				messageText.y = 128;				messageText.width = 512;			}			messageText.y = 260 - messageText.textHeight/2;		}		public function Show()		{			parentContainer.addChild(this);						if (contains(achievementIcon)) motion.createMove(achievementIcon, 50, 100, 1000);		}		public function SetAchievementIcon()		{			if (!contains(achievementIcon))			{				addChild(achievementIcon);				achievementIcon.x = 1000;				achievementIcon.y = 300;			}		}		public function SetOkayButton(f:Function)		{			okayCallback = f;						if (!contains(checkBtn))			{				addChild(checkBtn);				checkBtn.x = 494;				checkBtn.y = 316;			}		}		public function SetCancelButton(f:Function)		{			cancelCallback = f;						if (!contains(crossBtn))			{				addChild(crossBtn);				crossBtn.x = 155;				crossBtn.y = 316;			}		}		public function SetYesButton(f:Function)		{			yesCallback = f;						if (!contains(yesBtn))			{				addChild(yesBtn);				yesBtn.x = 381;				yesBtn.y = 316;			}		}		public function SetNoButton(f:Function)		{			noCallback = f;						if (!contains(noBtn))			{				addChild(noBtn);				noBtn.x = 137;				noBtn.y = 316;			}		}				//==============================//		// PRIVATE MEMBER FUNCTIONS		//		//==============================//				private function onOkay()		{			parentContainer.removeChild(this);			if (okayCallback != null) okayCallback();		}		private function onCancel()		{			parentContainer.removeChild(this);			if (cancelCallback != null) cancelCallback();		}		private function onYes()		{			parentContainer.removeChild(this);			if (yesCallback != null) yesCallback();		}		private function onNo()		{			parentContainer.removeChild(this);			if (noCallback != null) noCallback();		}	}	}