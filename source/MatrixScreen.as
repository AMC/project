package  {	import flash.display.MovieClip;	import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.Font;	import flash.text.TextFormatAlign;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.utils.getTimer;	import flash.net.URLLoader;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.geom.Point;		public class MatrixScreen extends MovieClip {		private var contentManager:ContentManager;		private var bid:int = 1;				private var profileIndexes:Array;				private var board:MovieClip;		private var bidPlate:MovieClip;		private var bidText:TextField;		private var bidTextFormat:TextFormat;				private var minus1:Button;		private var minus5:Button;		private var minus10:Button;		private var minus25:Button;		private var plus1:Button;		private var plus5:Button;		private var plus10:Button;		private var plus25:Button;		private var reset:Button;		private var playBtn:Button;				private var backBtn:Button;				private var motion:MotionEngine;				private var boardObjects:Array;				private var playStartTime:int;		private var net:URLLoader;				private var rollID:String;		private var rollResult:String;				private var isPlayDone:Boolean = false;		private var isLoadDone:Boolean = false;				public function MatrixScreen(matrixManager:ContentManager)		{			contentManager = matrixManager;			motion = new MotionEngine();			boardObjects = new Array();			profileIndexes = new Array();						Font.registerFont(Impact);						bidPlate = Game.GetMovieClip("BidPlate");			board = Game.GetMovieClip("MatrixBoard");			minus1 = new Button(Button.MINUS1);			minus5 = new Button(Button.MINUS5);			minus10 = new Button(Button.MINUS10);			minus25 = new Button(Button.MINUS25);			plus1 = new Button(Button.PLUS1);			plus5 = new Button(Button.PLUS5);			plus10 = new Button(Button.PLUS10);			plus25 = new Button(Button.PLUS25);			reset = new Button(Button.RESET);			playBtn = new Button(Button.PLAY);			backBtn = new Button(Button.BACK_ARROW);			bidText = new TextField();			bidTextFormat = new TextFormat("Impact",48,0xFFFFFF,null,null,null,null,null, TextFormatAlign.CENTER);			bidText.selectable = false;						addChild(playBtn);			addChild(bidPlate);			addChild(board);			addChild(minus1);			addChild(minus5);			addChild(minus10);			addChild(minus25);			addChild(plus1);			addChild(plus5);			addChild(plus10);			addChild(plus25);			addChild(reset);			addChild(bidText);			addChild(backBtn);						playBtn.SetOnClick(onPlay);			reset.SetOnClick(onReset);			minus1.SetOnClick(onMinus1);			minus5.SetOnClick(onMinus5);			minus10.SetOnClick(onMinus10);			minus25.SetOnClick(onMinus25);			plus1.SetOnClick(onPlus1);			plus5.SetOnClick(onPlus5);			plus10.SetOnClick(onPlus10);			plus25.SetOnClick(onPlus25);						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}		private function onAddedToStage(e:Event)		{			isPlayDone = true;			// Reset our bid @ 10			setBid(10);						// Disable our buttons until profiles are loaded ...			disableButtons();						// Load our profile data...			profileIndexes = [];			profileIndexes[0] = 0;			profileIndexes[1] = int(Math.random()*(Game.Profiles.length-1));						for (var n:int = 0; n < profileIndexes.length; n++)			{				Game.Profiles.Get(profileIndexes[n]).LoadProfile();			}						// Put things at random positions to be "flown" in...			var p:Point = new Point(360,310);			var a:Number = Math.random()*Math.PI*2;						playBtn.x = 508;					playBtn.y = 390;			bidPlate.x = p.x+Math.cos(a)*1000;	bidPlate.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			board.x = 1;						board.y = 75;						board.alpha = 0.0;			reset.x = p.x+Math.cos(a)*1000;		reset.y = p.x+Math.sin(a)*1000;		a = Math.random()*Math.PI*2;			minus1.x = p.x+Math.cos(a)*1000;	minus1.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			minus5.x = p.x+Math.cos(a)*1000;	minus5.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			minus10.x = p.x+Math.cos(a)*1000;	minus10.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			minus25.x = p.x+Math.cos(a)*1000;	minus25.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			plus1.x = p.x+Math.cos(a)*1000; 	plus1.y = p.y+Math.sin(a)*1000;		a = Math.random()*Math.PI*2;			plus5.x = p.x+Math.cos(a)*1000;		plus5.y = p.y+Math.sin(a)*1000;		a = Math.random()*Math.PI*2;			plus10.x = p.x+Math.cos(a)*1000;	plus10.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			plus25.x = p.x+Math.cos(a)*1000;	plus25.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			backBtn.x = p.x+Math.cos(a)*1000;	backBtn.y = p.y+Math.sin(a)*1000;	backBtn.scaleX = backBtn.scaleY = 0.5;						bidText.text = String(bid);			bidText.setTextFormat(bidTextFormat);			bidText.x = 572;	bidText.width = 88;	bidText.y = 306 - bidText.textHeight/2;						motion.createMove(bidPlate,508,215,500);			motion.createMove(reset,516,248,500);			motion.createMove(minus1,541,248,500);			motion.createMove(minus5,541,280,500);			motion.createMove(minus10,541,312,500);			motion.createMove(minus25,541,344,500);			motion.createMove(plus1,668,248,500);			motion.createMove(plus5,668,280,500);			motion.createMove(plus10,668,312,500);			motion.createMove(plus25,668,344,500);			motion.createMove(backBtn,4,530,500);			motion.createFadeIn(board,500);			motion.createFadeIn(bidText, 500, null, 500);						var timer:Timer = new Timer(0,0);			timer.addEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);			timer.start();		}		private function onRemovedFromStage(e:Event=null)		{					}		private function loadNewProfiles()		{			profileIndexes[0] = 0;			profileIndexes[1] = int(Math.random()*(Game.Profiles.length-1));						for (var n:int = 0; n < profileIndexes.length; n++)			{				Game.Profiles.Get(profileIndexes[n]).LoadProfile();			}						var timer:Timer = new Timer(0,0);			timer.addEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);			timer.start();		}		private function onCheckForProfilesLoaded(e:Event)		{			var b:Boolean = true;						for (var n:int = 0; n < profileIndexes.length; n++)			{				var profile:ProfileNode = Game.Profiles.Get(profileIndexes[n]);				if (profile.isLoaded == false) b = false;			}			if (b)			{				e.target.stop();				e.target.removeEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);				e = null;				isLoadDone = true;				if (isPlayDone) enableButtons();			}		}		public function SetBackCallback(f:Function)		{			backBtn.SetOnClick(f);		}		public function Shatter(callback:Function)		{			if (boardObjects.length > 0)			{				for (var n:int = 0; n < boardObjects.length; n++)				{					motion.createMove(boardObjects[n],0,-400,300,null,0,true);				}				boardObjects = new Array();			}						motion.createFadeOut(bidText, 300);			motion.createMove(playBtn,260,210,300);			motion.createMove(bidPlate, 900, -100, 500);			motion.createFadeOut(board,500);			motion.createMove(reset, -100, 900, 500);			motion.createMove(minus1, 900, 900, 500);			motion.createMove(minus5, -100, -100, 500);			motion.createMove(minus10, 900, -100, 500);			motion.createMove(minus25, -100, 900, 500);			motion.createMove(plus1, 900, 900, 500);			motion.createMove(plus5, -100, -100, 500);			motion.createMove(plus10, 900, -100, 500);			motion.createMove(plus25, -100, 900, 500, callback);		}		private function onPlay()		{			isPlayDone = false;			isLoadDone = false;						if (Game.GetVirtualCoins() < bid)			{				MessageBox.Okay("Game Message","Insufficient funds to play.");				return;			}			Game.SetVirtualCoins(Game.GetVirtualCoins() - bid);						disableButtons();			if (boardObjects.length > 0)			{				for (var n:int = 0; n < boardObjects.length; n++)				{					motion.createMove(boardObjects[n],0,-400,300,null,n*50,true);				}				boardObjects = [];			}						net = new URLLoader();			net.addEventListener(Event.COMPLETE, onPlayReceived);			try			{				net.load(new URLRequest(Game.NET+"?action=play&mode=matrix&bid="+bid));			}			catch (e:Error)			{							}		}				private function onPlayReceived(e:Event)		{			net.removeEventListener(Event.COMPLETE, onPlayReceived);						if (String(net.data).indexOf("<error>") >= 0)			{				MessageBox.Okay("Game Message",Game.ParseXML(net.data,"error"));				return;			}						rollResult = Game.ParseXML(net.data,"result");			rollID = Game.ParseXML(net.data,"rollID");						for (var n:int = 0; n < 9; n++)			{				var card:Card;								if (rollResult.charAt(n) == "0") card = new Card(Game.Profiles.Get(profileIndexes[0]));				else card = new Card(Game.Profiles.Get(profileIndexes[1]));								addChild(card);				card.x = 800;				card.y = 300;				boardObjects[n] = card;				var dX:int = 95;				var dY:int = 147;				dX += n * 160;				while (dX > 480)				{					dY += 180;					dX -= 480;				}				motion.createMove(card,dX,dY,300,null,n*100);				var rand:int = int(Math.floor(Math.random()*24));				rand -= 12;				motion.createRotationZ(card,rand,300,n==8?checkWin:null,n*100);			}			loadNewProfiles();		}		private var checkTimer:Timer;		private function checkWin()		{			if (checkTimer != null)			{				checkTimer.removeEventListener(TimerEvent.TIMER, onCheckWin);				checkTimer.stop();				checkTimer = null;			}			for (var n:int = 0; n < 9; n++)			{				if (boardObjects[n].isLoaded == false)				{					checkTimer = new Timer(100,1);					checkTimer.addEventListener(TimerEvent.TIMER, onCheckWin);					checkTimer.start();					return;				}			}			for (n = 0; n < 9; n++)			{				motion.createFlip(boardObjects[n],200,n==8?onFlipComplete:null,n*50);			}		}		private var winAmount:int;		private var connections:int;		private function onFlipComplete()		{			winAmount = 0;			connections = 0;						// CHECK ACROSS			if (boardObjects[0].ID == boardObjects[1].ID && boardObjects[1].ID == boardObjects[2].ID && boardObjects[2].ID == Game.Profiles.Get(0).ID ) 			{				motion.createBlink(boardObjects[0], 5000, 333, 0xFF0000, null, 333);				motion.createBlink(boardObjects[1], 5000, 333, 0xFF0000, null, 333);				motion.createBlink(boardObjects[2], 5000, 333, 0xFF0000, null, 333);								winAmount += bid;				connections++;			}			if (boardObjects[3].ID == boardObjects[4].ID && boardObjects[4].ID == boardObjects[5].ID && boardObjects[5].ID == Game.Profiles.Get(0).ID )			{				motion.createBlink(boardObjects[3], 5000, 333, 0xFF0000, null, 333);				motion.createBlink(boardObjects[4], 5000, 333, 0xFF0000, null, 333);				motion.createBlink(boardObjects[5], 5000, 333, 0xFF0000, null, 333);								winAmount += bid;				connections++;			}			if (boardObjects[6].ID == boardObjects[7].ID && boardObjects[7].ID == boardObjects[8].ID && boardObjects[8].ID == Game.Profiles.Get(0).ID )			{				motion.createBlink(boardObjects[6], 5000, 333, 0xFF0000, null, 333);				motion.createBlink(boardObjects[7], 5000, 333, 0xFF0000, null, 333);				motion.createBlink(boardObjects[8], 5000, 333, 0xFF0000, null, 333);								winAmount += bid;				connections++;			}			// CHECK DOWN			if (boardObjects[0].ID == boardObjects[3].ID && boardObjects[3].ID == boardObjects[6].ID && boardObjects[6].ID == Game.Profiles.Get(0).ID )			{				motion.createBlink(boardObjects[0], 5000, 333, 0x00FF00, null, 111);				motion.createBlink(boardObjects[3], 5000, 333, 0x00FF00, null, 111);				motion.createBlink(boardObjects[6], 5000, 333, 0x00FF00, null, 111);								winAmount += bid;				connections++;			}			if (boardObjects[1].ID == boardObjects[4].ID && boardObjects[4].ID == boardObjects[7].ID && boardObjects[7].ID == Game.Profiles.Get(0).ID )			{				motion.createBlink(boardObjects[1], 5000, 333, 0x00FF00, null, 111);				motion.createBlink(boardObjects[4], 5000, 333, 0x00FF00, null, 111);				motion.createBlink(boardObjects[7], 5000, 333, 0x00FF00, null, 111);								winAmount += bid;				connections++;			}			if (boardObjects[2].ID == boardObjects[5].ID && boardObjects[5].ID == boardObjects[8].ID && boardObjects[8].ID == Game.Profiles.Get(0).ID )			{				motion.createBlink(boardObjects[2], 5000, 333, 0x00FF00, null, 111);				motion.createBlink(boardObjects[5], 5000, 333, 0x00FF00, null, 111);				motion.createBlink(boardObjects[8], 5000, 333, 0x00FF00, null, 111);								winAmount += bid;				connections++;			}						if (boardObjects[0].ID == boardObjects[4].ID && boardObjects[4].ID == boardObjects[8].ID && boardObjects[8].ID == Game.Profiles.Get(0).ID )			{				motion.createBlink(boardObjects[0], 5000, 333, 0x0000FF, null, 222);				motion.createBlink(boardObjects[4], 5000, 333, 0x0000FF, null, 222);				motion.createBlink(boardObjects[8], 5000, 333, 0x0000FF, null, 222);								winAmount += bid;				connections++;			}			if (boardObjects[2].ID == boardObjects[4].ID && boardObjects[4].ID == boardObjects[6].ID && boardObjects[6].ID == Game.Profiles.Get(0).ID )			{				motion.createBlink(boardObjects[2], 5000, 333, 0x0000FF, null, 222);				motion.createBlink(boardObjects[4], 5000, 333, 0x0000FF, null, 222);				motion.createBlink(boardObjects[6], 5000, 333, 0x0000FF, null, 222);								winAmount += bid;				connections++;			}						//winAmount *= connections;						if (winAmount == bid * 8)			{				// JACKPOT!!!				winAmount *= 2;			}						if (winAmount > 0)			{				net = new URLLoader();				net.addEventListener(Event.COMPLETE, onWinConfirmation);				net.load(new URLRequest(Game.NET+"?action=win&rollID="+rollID+"&bid="+bid+"&result="+rollResult+"&winAmount="+winAmount));			}			else finishWinConfirmation();		}		private function onWinConfirmation(e:Event)		{			net.removeEventListener(Event.COMPLETE, onWinConfirmation);						var win:int = int(Game.ParseXML(net.data,"coins"));			Game.SetVirtualCoins(win);						var numCoins = (winAmount/bid)*2;						var currentAngle:Number = 0.0;						var curX:int = 0;						for (var n:int = 0; n < numCoins; n++)			{				var coin:MovieClip = Game.GetMovieClip("Coin");				addChild(coin);								coin.x = bidPlate.x + 112 + curX;				coin.y = bidPlate.y + 126;				curX += 2;								motion.createMove(coin,586,12,500,playCoinSound,n*100,true);			}						finishWinConfirmation();		}		private function playCoinSound(e:Event=null)		{			if (Game.IsSoundEnabled())			{				// TODO: Play sound!!			}		}		private function finishWinConfirmation()		{			isPlayDone = true;			if (isLoadDone) enableButtons();		}		private function onCheckWin(e:Event) { checkWin(); }				private function disableButtons()		{			backBtn.Disable();			reset.Disable();			minus1.Disable();			minus5.Disable();			minus10.Disable();			minus25.Disable();			plus1.Disable();			plus5.Disable();			plus10.Disable();			plus25.Disable();			playBtn.Disable();		}		private function enableButtons()		{			backBtn.Enable();			reset.Enable();			minus1.Enable();			minus5.Enable();			minus10.Enable();			minus25.Enable();			plus1.Enable();			plus5.Enable();			plus10.Enable();			plus25.Enable();			playBtn.Enable();		}				private function onReset() { setBid(1); }		private function onMinus1() { setBid(bid-1); }		private function onMinus5() { setBid(bid-5); }		private function onMinus10() { setBid(bid-10); }		private function onMinus25() { setBid(bid-25); }		private function onPlus1() { setBid(bid+1); }		private function onPlus5() { setBid(bid+5); }		private function onPlus10() { setBid(bid+10); }		private function onPlus25() { setBid(bid+25); }		private function setBid(n:int)		{			bid = n;			if (bid < 10) bid = 10;			if (bid > 100) bid = 100;			if (bid > Game.GetVirtualCoins()) 			{				if (Game.GetVirtualCoins() == 0)				{					//TODO: Message box that says you're out of currency ...				}				else bid = Game.GetVirtualCoins();			}			bidText.text = String(bid);			bidText.setTextFormat(bidTextFormat);		}	}	}