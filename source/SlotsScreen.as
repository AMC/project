package  {	import flash.display.MovieClip;	import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.net.URLLoader;	import flash.text.TextFormatAlign;	import flash.geom.Point;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.utils.getTimer;	import flash.filters.GlowFilter;	import flash.filters.BlurFilter;	import flash.events.MouseEvent;		public class SlotsScreen extends MovieClip	{		private var contentManager:ContentManager;				private var bid:int;		private var modBid:int;				private var profileIndexes:Array;				private var bg:MovieClip;		private var border:MovieClip;		private var overlay:MovieClip;		private var bidPlate:MovieClip;		private var bidText:TextField;		private var bidTextFormat:TextFormat;				private var minus1:Button;		private var minus5:Button;		private var minus10:Button;		private var minus25:Button;		private var plus1:Button;		private var plus5:Button;		private var plus10:Button;		private var plus25:Button;		private var reset:Button;		private var playBtn:Button;				private var backBtn:Button;				private var motion:MotionEngine;				private var tumbler1:MovieClip;		private var tumbler2:MovieClip;		private var tumbler3:MovieClip;		private var tumbler1Blurred:MovieClip;		private var tumbler2Blurred:MovieClip;		private var tumbler3Blurred:MovieClip;		private var tumblerContainer:MovieClip;		private var tumblerContainerMask:MovieClip;				private var tumbler1Data:Array;		private var tumbler2Data:Array;		private var tumbler3Data:Array;				private var playStartTime:int;		private var net:URLLoader;				private var rollID:String;		private var rollResult:String;				private var isPlayDone:Boolean = false;		private var isLoadDone:Boolean = false;				private var spinStart:int = 0;				private var minigamePanel:MinigameSelector;				private var paylines:Array;		private var c1:MovieClip;		private var c2:MovieClip;		private var c3:MovieClip;		private var l1:MovieClip;		private var l2:MovieClip;		public function SlotsScreen(slotsManager:ContentManager) 		{			contentManager = slotsManager;			motion = new MotionEngine();						// The tumblerXData arrays store the order of the tumblers given by the server			tumbler1Data = new Array();			tumbler2Data = new Array();			tumbler3Data = new Array();			// profileIndexes keeps the array of which profiles have been selected for this game			profileIndexes = new Array();						// Let's initialize all the graphics we need for Slots...			bg = Game.GetMovieClip("SlotsBackground");			border = Game.GetMovieClip("Border");			overlay = Game.GetMovieClip("Overlay");			bidPlate = Game.GetMovieClip("BidPlate");			minus1 = new Button(Button.MINUS1);			minus5 = new Button(Button.MINUS5);			minus10 = new Button(Button.MINUS10);			minus25 = new Button(Button.MINUS25);			plus1 = new Button(Button.PLUS1);			plus5 = new Button(Button.PLUS5);			plus10 = new Button(Button.PLUS10);			plus25 = new Button(Button.PLUS25);			reset = new Button(Button.RESET);			playBtn = new Button(Button.SLOTSPLAY);			backBtn = new Button(Button.BACK_ARROW);			bidText = new TextField();			bidTextFormat = new TextFormat("Impact",48,0xFFFFFF,null,null,null,null,null, TextFormatAlign.CENTER);			bidText.selectable = false;			// Initialize our tumbler clips...			tumbler1 = new MovieClip();			tumbler2 = new MovieClip();			tumbler3 = new MovieClip();			tumbler1Blurred = new MovieClip();			tumbler2Blurred = new MovieClip();			tumbler3Blurred = new MovieClip();			tumblerContainer = new MovieClip();			tumblerContainerMask = Game.GetMovieClip("SlotsBackground");			paylines = new Array();			for (var n:int = 0; n < 18; n++)			{				paylines[n] = new Payline(n+1);			}			c1 = new MovieClip(); c2 = new MovieClip(); c3 = new MovieClip();			l1 = new MovieClip(); l2 = new MovieClip();						// We're going to add everything to the stage now ... I guess			addChild(playBtn);			addChild(bg);			addChild(tumblerContainer);			addChild(tumblerContainerMask);			tumblerContainer.addChild(tumbler1);			tumblerContainer.addChild(tumbler2);			tumblerContainer.addChild(tumbler3);			addChild(overlay);			addChild(border);			addChild(bidPlate);			bidPlate.addChild(minus1);			bidPlate.addChild(minus5);			bidPlate.addChild(minus10);			bidPlate.addChild(minus25);			bidPlate.addChild(plus1);			bidPlate.addChild(plus5);			bidPlate.addChild(plus10);			bidPlate.addChild(plus25);			bidPlate.addChild(reset);			bidPlate.addChild(bidText);			addChild(backBtn);			for (n = 0; n < paylines.length; n++)			{				paylines[n].alpha = 0;				addChild(paylines[n]);			}						playBtn.SetOnClick(onPlay);			reset.SetOnClick(onReset);			minus1.SetOnClick(onMinus1);			minus5.SetOnClick(onMinus5);			minus10.SetOnClick(onMinus10);			minus25.SetOnClick(onMinus25);			plus1.SetOnClick(onPlus1);			plus5.SetOnClick(onPlus5);			plus10.SetOnClick(onPlus10);			plus25.SetOnClick(onPlus25);						playBtn.addEventListener(MouseEvent.ROLL_OVER, onPlayBtnOver);			playBtn.addEventListener(MouseEvent.ROLL_OUT, onPlayBtnOut);						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			this.addEventListener(Event.REMOVED_FROM_STAGE, onRemovedFromStage);		}		private function onAddedToStage(e:Event)		{			// Reset our bid @ 10			setBid(10);						// Disable our buttons until profiles are loaded ...			disableButtons();						// Load our profile data...			profileIndexes = [];			profileIndexes[0] = 0;			for (var n:int = 1; n < 4; n++)			{				var found:Boolean = false;				var pI:int = int(Math.random()*(Game.Profiles.length-2))+1								for (var t:int = 1; t < profileIndexes.length; t++)					if (profileIndexes[t] == pI)						found = true;										if (!found)					profileIndexes[n] = pI;				else n--;			}						for (n = 0; n < profileIndexes.length; n++)			{				Game.Profiles.Get(profileIndexes[n]).LoadProfile();			}						// Put things at random positions to be "flown" in...			var p:Point = new Point(360,310);			var a:Number = Math.random()*Math.PI*2;						playBtn.x = 900;					playBtn.y = 390;			bidPlate.x = p.x+Math.cos(a)*1000;	bidPlate.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			reset.x = p.x+Math.cos(a)*1000;		reset.y = p.x+Math.sin(a)*1000;		a = Math.random()*Math.PI*2;			minus1.x = p.x+Math.cos(a)*1000;	minus1.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			minus5.x = p.x+Math.cos(a)*1000;	minus5.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			minus10.x = p.x+Math.cos(a)*1000;	minus10.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			minus25.x = p.x+Math.cos(a)*1000;	minus25.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			plus1.x = p.x+Math.cos(a)*1000; 	plus1.y = p.y+Math.sin(a)*1000;		a = Math.random()*Math.PI*2;			plus5.x = p.x+Math.cos(a)*1000;		plus5.y = p.y+Math.sin(a)*1000;		a = Math.random()*Math.PI*2;			plus10.x = p.x+Math.cos(a)*1000;	plus10.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			plus25.x = p.x+Math.cos(a)*1000;	plus25.y = p.y+Math.sin(a)*1000;	a = Math.random()*Math.PI*2;			backBtn.x = p.x+Math.cos(a)*1000;	backBtn.y = p.y+Math.sin(a)*1000;	backBtn.scaleX = backBtn.scaleY = 0.5;			border.x = 27;						border.y = 137;			overlay.x = 60;						overlay.y = 169;			bg.x = 60;							bg.y = 169;			tumblerContainer.x = 60;			tumblerContainer.y = 169;			tumblerContainerMask.x = 60;		tumblerContainerMask.y = 169;			tumbler1.x = 0;						tumbler1.y = -(10 * 128);			tumbler2.x = 128;					tumbler2.y = -(10 * 128);			tumbler3.x = 256;					tumbler3.y = -(10 * 128);			tumblerContainer.mask = tumblerContainerMask;						for (n = 0; n < paylines.length; n++)			{				var pl:Payline = paylines[n] as Payline;				pl.x = pl.dX;				pl.y = pl.dY;				pl.addEventListener(MouseEvent.ROLL_OVER, onPaylineOver);				pl.addEventListener(MouseEvent.ROLL_OUT, onPayLineOut);				motion.createFadeIn(pl,500);			}						border.alpha = overlay.alpha = bg.alpha = tumblerContainer.alpha = 0;			c1.alpha = c2.alpha = c3.alpha = l1.alpha = l2.alpha = 0;						bidText.text = String(bid);			bidText.setTextFormat(bidTextFormat);			bidText.x = 64;	bidText.width = 88;	bidText.y = (33+64) - bidText.textHeight/2;						motion.createMove(playBtn,450,390, 500, null, 500);			motion.createRotationZ(playBtn,-20,500, null, 500);			motion.createMove(bidPlate,508,94,500);			motion.createMove(reset,8,33,500);			motion.createMove(minus1,33,33,500);			motion.createMove(minus5,33,65,500);			motion.createMove(minus10,33,97,500);			motion.createMove(minus25,33,129,500);			motion.createMove(plus1,160,33,500);			motion.createMove(plus5,160,65,500);			motion.createMove(plus10,160,97,500);			motion.createMove(plus25,160,129,500);			motion.createFadeIn(bidText, 500, null, 500);			motion.createMove(backBtn,4,530,500);			motion.createFadeIn(border, 500);			motion.createFadeIn(overlay, 500);			motion.createFadeIn(bg, 500);						var timer:Timer = new Timer(0,0);			timer.addEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);			timer.start();		}		private function onRemovedFromStage(e:Event=null)		{			//motion.createFadeOut(tumblerContainer,1);		}		private var allLines:Array;		private var allCircles:Array;				private function onPlayBtnOver(e:MouseEvent)		{			allCircles = new Array();			allLines = new Array();						for (var n:int = 0; n < paylines.length; n++)			{				var payline:Payline = paylines[n] as Payline;								if (payline.isEnabled)				{					var cA:MovieClip = new MovieClip();					cA.graphics.lineStyle(0,payline.color);	cA.graphics.beginFill(payline.color);					cA.graphics.drawCircle(payline.p1.x, payline.p1.y + payline.lineNumber*2, 16.0);					cA.graphics.endFill();										var cB:MovieClip = new MovieClip();					cB.graphics.lineStyle(0,payline.color);	cB.graphics.beginFill(payline.color);					cB.graphics.drawCircle(payline.p2.x, payline.p2.y + payline.lineNumber*2, 16.0);					cB.graphics.endFill();										var cC:MovieClip = new MovieClip();					cC.graphics.lineStyle(0,payline.color);	cC.graphics.beginFill(payline.color);					cC.graphics.drawCircle(payline.p3.x, payline.p3.y + payline.lineNumber*2, 16.0);					cC.graphics.endFill();										var lA:MovieClip = new MovieClip();					lA.graphics.lineStyle(8, payline.color);	lA.graphics.beginFill(payline.color);					lA.graphics.moveTo(payline.p1.x, payline.p1.y + payline.lineNumber*2);					lA.graphics.lineTo(payline.p2.x, payline.p2.y + payline.lineNumber*2);					lA.graphics.endFill();										var lB:MovieClip = new MovieClip();					lB.graphics.lineStyle(8, payline.color);	lB.graphics.beginFill(payline.color);					lB.graphics.moveTo(payline.p2.x, payline.p2.y + payline.lineNumber*2);					lB.graphics.lineTo(payline.p3.x, payline.p3.y + payline.lineNumber*2);					lB.graphics.endFill();										cA.filters = cB.filters = cC.filters = lA.filters = lB.filters = [new GlowFilter(payline.color,1.0,30.0,30.0,2)];										allCircles[allCircles.length] = cA;					allCircles[allCircles.length] = cB;					allCircles[allCircles.length] = cC;					allLines[allLines.length] = lA;					allLines[allLines.length] = lB;										addChild(cA); addChild(cB); addChild(cC); addChild(lA); addChild(lB);				}			}		}		private function onPlayBtnOut(e:MouseEvent)		{			if (allCircles == null) return;			if (allLines == null) return;						for (var n:int = 0; n < allCircles.length; n++)			{				removeChild(allCircles[n]);			}			for (n = 0; n < allLines.length; n++)			{				removeChild(allLines[n]);			}		}		private function onPaylineOver(e:MouseEvent)		{			var payline:Payline = e.target as Payline;						c1.graphics.clear();			c1.graphics.lineStyle(0,payline.color);	c1.graphics.beginFill(payline.color);			c1.graphics.drawCircle(payline.p1.x, payline.p1.y + payline.lineNumber*2, 16.0);			c1.graphics.endFill();						c2.graphics.clear();			c2.graphics.lineStyle(0,payline.color);	c2.graphics.beginFill(payline.color);			c2.graphics.drawCircle(payline.p2.x, payline.p2.y + payline.lineNumber*2, 16.0);			c2.graphics.endFill();						c3.graphics.clear();			c3.graphics.lineStyle(0,payline.color);	c3.graphics.beginFill(payline.color);			c3.graphics.drawCircle(payline.p3.x, payline.p3.y + payline.lineNumber*2, 16.0);			c3.graphics.endFill();						l1.graphics.clear();			l1.graphics.lineStyle(8, payline.color);	l1.graphics.beginFill(payline.color);			l1.graphics.moveTo(payline.p1.x, payline.p1.y + payline.lineNumber*2);			l1.graphics.lineTo(payline.p2.x, payline.p2.y + payline.lineNumber*2);			l1.graphics.endFill();						l2.graphics.clear();			l2.graphics.lineStyle(8, payline.color);	l2.graphics.beginFill(payline.color);			l2.graphics.moveTo(payline.p2.x, payline.p2.y + payline.lineNumber*2);			l2.graphics.lineTo(payline.p3.x, payline.p3.y + payline.lineNumber*2);			l2.graphics.endFill();						c1.filters = c2.filters = c3.filters = l1.filters = l2.filters = [new GlowFilter(payline.color,1.0,30.0,30.0,2)];						addChild(l1); addChild(l2); addChild(c1); addChild(c2); addChild(c3);		}		private function onPayLineOut(e:MouseEvent)		{			removeChild(c1); removeChild(c2); removeChild(c3); removeChild(l1); removeChild(l2);						//c1 = new MovieClip(); c2 = new MovieClip(); c3 = new MovieClip();			//l1 = new MovieClip(); l2 = new MovieClip();		}				private function onCheckForProfilesLoaded(e:Event)		{			var done:Boolean = true;			for (var n:int = 0; n < profileIndexes.length; n++)			{				var profile:ProfileNode = Game.Profiles.Get(profileIndexes[n]);				if (profile.isLoaded == false) done = false;								if (profile.isLoaded == true && profile.isDefault == true)				{					done = false;										Game.Message("Found a default profile image ... finding a new friend!");										var found:Boolean = true;					while (found)					{						found = false;												var pI:int = int(Math.random()*(Game.Profiles.length-2))+1												for (var t:int = 1; t < profileIndexes.length; t++)							if (profileIndexes[t] == pI)								found = true;														if (!found)						{							profileIndexes[n] = pI;							Game.Profiles.Get(pI).LoadProfile();						}					}				}			}			if (done)			{				e.target.stop();				e.target.removeEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);				e = null;								tumbler1Blurred.filters = [];				tumbler2Blurred.filters = [];				tumbler3Blurred.filters = [];								tumblerContainer.removeChild(tumbler1);				tumblerContainer.removeChild(tumbler2);				tumblerContainer.removeChild(tumbler3);								while (tumbler1.numChildren > 0) tumbler1.removeChildAt(0);				while (tumbler2.numChildren > 0) tumbler2.removeChildAt(0);				while (tumbler2.numChildren > 0) tumbler2.removeChildAt(0);				while (tumbler1Blurred.numChildren > 0) tumbler1Blurred.removeChildAt(0);				while (tumbler2Blurred.numChildren > 0) tumbler2Blurred.removeChildAt(0);				while (tumbler3Blurred.numChildren > 0) tumbler3Blurred.removeChildAt(0);								tumbler1Data = [];				tumbler2Data = [];				tumbler3Data = [];								tumbler1 = new MovieClip();				tumbler2 = new MovieClip();				tumbler3 = new MovieClip();				tumbler1Blurred = new MovieClip();				tumbler2Blurred = new MovieClip();				tumbler2Blurred = new MovieClip();								tumblerContainer.addChild(tumbler1);				tumblerContainer.addChild(tumbler2);				tumblerContainer.addChild(tumbler3);								tumbler1.x = 0;						tumbler1.y = -(10 * 128);				tumbler2.x = 128;					tumbler2.y = -(10 * 128);				tumbler3.x = 256;					tumbler3.y = -(10 * 128);								var c:Card;				for (n = 0; n < Game.Tumbler1.length; n++)				{					var num:int = int(Game.Tumbler1.charAt(n)) - 1;					profile = Game.Profiles.Get(profileIndexes[num]);										var card1:Card = new Card(profile);					var card2:Card = new Card(profile);					var card3:Card = new Card(profile);					var blur1:Card = new Card(profile);					var blur2:Card = new Card(profile);					var blur3:Card = new Card(profile);										tumbler1Data[n] = card1;					tumbler1Data[n+13] = card2;					tumbler1Data[n+26] = card3;										tumbler1.addChild(card1);	tumbler1Blurred.addChild(blur1);					tumbler1.addChild(card2);	tumbler1Blurred.addChild(blur2);					tumbler1.addChild(card3);	tumbler1Blurred.addChild(blur3);										card1.x = blur1.x = 0;	card1.y = blur1.y = n*128;					card2.x = blur2.x = 0;	card2.y = blur2.y = 1280 + n*128;					card3.x = blur3.x = 0;	card3.y = blur3.y = 2560 + n*128;										motion.createFadeIn(card1, 500);					motion.createFadeIn(card2, 500);					motion.createFadeIn(card3, 500);										tumbler1Blurred.filters = [new BlurFilter(0, 64, 1)];				}				for (n = 0; n < Game.Tumbler2.length; n++)				{					num = int(Game.Tumbler2.charAt(n)) - 1;					profile = Game.Profiles.Get(profileIndexes[num]);										card1 = new Card(profile);					card2 = new Card(profile);					card3 = new Card(profile);					blur1 = new Card(profile);					blur2 = new Card(profile);					blur3 = new Card(profile);										tumbler2Data[n] = card1;					tumbler2Data[n+13] = card2;					tumbler2Data[n+26] = card3;										tumbler2.addChild(card1);	tumbler2Blurred.addChild(blur1);					tumbler2.addChild(card2);	tumbler2Blurred.addChild(blur2);					tumbler2.addChild(card3);	tumbler2Blurred.addChild(blur3);										card1.x = blur1.x = 0;	card1.y = blur1.y = n*128;					card2.x = blur2.x = 0;	card2.y = blur2.y = 1280 + n*128;					card3.x = blur3.x = 0;	card3.y = blur3.y = 2560 + n*128;										motion.createFadeIn(card1, 500);					motion.createFadeIn(card2, 500);					motion.createFadeIn(card3, 500);										tumbler2Blurred.filters = [new BlurFilter(0, 64, 1)];				}				for (n = 0; n < Game.Tumbler3.length; n++)				{					num = int(Game.Tumbler3.charAt(n)) - 1;					profile = Game.Profiles.Get(profileIndexes[num]);										card1 = new Card(profile);					card2 = new Card(profile);					card3 = new Card(profile);					blur1 = new Card(profile);					blur2 = new Card(profile);					blur3 = new Card(profile);										tumbler3Data[n] = card1;					tumbler3Data[n+13] = card2;					tumbler3Data[n+26] = card3;										tumbler3.addChild(card1);	tumbler3Blurred.addChild(blur1);					tumbler3.addChild(card2);	tumbler3Blurred.addChild(blur2);					tumbler3.addChild(card3);	tumbler3Blurred.addChild(blur3);										card1.x = blur1.x = 0;	card1.y = blur1.y = n*128;					card2.x = blur2.x = 0;	card2.y = blur2.y = 1280 + n*128;					card3.x = blur3.x = 0;	card3.y = blur3.y = 2560 + n*128;										motion.createFadeIn(card1, 500);					motion.createFadeIn(card2, 500);					motion.createFadeIn(card3, 500);										tumbler3Blurred.filters = [new BlurFilter(0, 64, 1)];				}				enableButtons();				motion.createFadeIn(tumblerContainer, 500);				motion.createFadeIn(c1,500);				motion.createFadeIn(c2,500);				motion.createFadeIn(c3,500);				motion.createFadeIn(l1,500);				motion.createFadeIn(l2,500);			}		}		public function SetBackCallback(f:Function)		{			backBtn.SetOnClick(f);		}		public function Shatter(callback:Function)		{			motion.createFadeOut(border, 500);			motion.createFadeOut(overlay, 500);			motion.createFadeOut(bg, 500);			motion.createFadeOut(tumblerContainer, 500);						motion.createFadeOut(bidText, 300);			motion.createMove(playBtn,900,300,300);			motion.createMove(bidPlate, 900, -100, 500);			motion.createMove(reset, -100, 900, 500);			motion.createMove(minus1, 900, 900, 500);			motion.createMove(minus5, -100, -100, 500);			motion.createMove(minus10, 900, -100, 500);			motion.createMove(minus25, -100, 900, 500);			motion.createMove(plus1, 900, 900, 500);			motion.createMove(plus5, -100, -100, 500);			motion.createMove(plus10, 900, -100, 500);			motion.createMove(plus25, -100, 900, 500, callback);		}		private function onPlay()		{			isPlayDone = false;			isLoadDone = false;						modBid = 0;			for (var n:int = 0; n < paylines.length; n++) if (paylines[n].isEnabled) modBid += bid;						if (Game.GetVirtualCoins() < modBid)			{				MessageBox.Okay("Insufficient funds to play.");				return;			}						Game.SetVirtualCoins(Game.GetVirtualCoins() - modBid);						disableButtons();						spinStart = getTimer();						motion.createRotationZ(playBtn, 45, 1000, returnPlayBtn);						motion.createSpin(tumbler1, 100, tumbler1Blurred, null, 0);			motion.createSpin(tumbler2, 100, tumbler2Blurred, null, 200);			motion.createSpin(tumbler3, 100, tumbler3Blurred, null, 400);						net = new URLLoader();			net.addEventListener(Event.COMPLETE, onPlayReceived);						try			{				net.load(new URLRequest(Game.NET+"?action=play&mode=slots&bid="+modBid));			}			catch (e:Error)			{				MessageBox.Okay("Network Error\n"+net.data);				enableButtons();				Game.SetVirtualCoins(Game.GetVirtualCoins() + modBid);			}		}		private function returnPlayBtn(e:Event = null)		{			motion.createRotationZ(playBtn, -20, 200);		}		private function onPlayReceived(e:Event = null)		{			net.removeEventListener(Event.COMPLETE, onPlayReceived);						if (String(net.data).indexOf("<error>") >= 0)			{				MessageBox.Okay(Game.ParseXML(net.data,"error"));				enableButtons();				return;			}						rollID = Game.ParseXML(net.data,"rollID");			rollResult = Game.ParseXML(net.data,"result");						checkWin();		}		private function checkWin()		{			var index1:int = int(rollResult.charAt(0));			var index2:int = int(rollResult.charAt(1));			var index3:int = int(rollResult.charAt(2));						if (getTimer() - spinStart < 3000)			{				var spinTimer:Timer = new Timer(100,0);				spinTimer.addEventListener(TimerEvent.TIMER, onSpinTimerCheck);				spinTimer.start();			}			else			{				motion.stopSpin(tumbler1, index1*128, 0);				motion.stopSpin(tumbler2, index2*128, 200);				motion.stopSpin(tumbler3, index3*128, 400, onSpinComplete);			}		}		private function onSpinTimerCheck(e:TimerEvent)		{			if (getTimer() - spinStart < 3000)			{				e.target.start();				return;			}			else			{				e.target.removeEventListener(TimerEvent.TIMER, onSpinTimerCheck);				e = null;				checkWin();			}		}		private var winAmount:int;		private function onSpinComplete(e:Event = null)		{			var achieve:String = Game.ParseXML(net.data,"achievement");			if (achieve != null)			{				MessageBox.Achievement("ACHIEVEMENT EARNED:\nFirst Slots Play", onSpinComplete2);			}			else onSpinComplete2();		}		private function onSpinComplete2(e:Event = null)		{			winAmount = 0;						var index1:int = 1 - int(rollResult.charAt(0));			if (index1 < 0) index1 += 10;			var index2:int = 1 - int(rollResult.charAt(1));			if (index2 < 0) index2 += 10;			var index3:int = 1 - int(rollResult.charAt(2));			if (index3 < 0) index3 += 10;						var raw1:int = int(rollResult.charAt(0));			var raw2:int = int(rollResult.charAt(1));			var raw3:int = int(rollResult.charAt(2));						var indexes:Array = new Array();			indexes = [index1-1,index2-1,index3-1,index1,index2,index3,index1+1,index2+1,index3+1];			for (var n:int = 0; n < 3; n++) if (indexes[n] < 0) indexes[n] += 10;			for (n = 6; n < 9; n++) if (indexes[n] >= 10) indexes[n] -= 10;						var multiplier:int = 0;						if (tumbler1Data[index1].ID == tumbler2Data[index2].ID &&				tumbler2Data[index2].ID == tumbler3Data[index3].ID)			{				var tumblerID:String = tumbler1Data[index1].ID + ": " + tumbler1Data[index1].Name;				var profile1ID:String = Game.Profiles.Get(profileIndexes[index1]).ID + ": " + Game.Profiles.Get(profileIndexes[index1]).Name;				if (tumbler1Data[index1].ID == Game.Profiles.Get(profileIndexes[0]).ID) { winAmount = bid * 240; multiplier = 240; }				if (tumbler1Data[index1].ID == Game.Profiles.Get(profileIndexes[1]).ID) { winAmount = bid * 40; multiplier = 40; }				if (tumbler1Data[index1].ID == Game.Profiles.Get(profileIndexes[2]).ID) { winAmount = bid * 8; multiplier = 8; }				if (tumbler1Data[index1].ID == Game.Profiles.Get(profileIndexes[3]).ID) { winAmount = bid * 2; multiplier = 2; }								display("Won "+winAmount+" coins!");			}			if (winAmount > 0)			{				net = new URLLoader();				net.addEventListener(Event.COMPLETE, onWinConfirmation);				net.load(new URLRequest(Game.NET+"?action=win&rollID="+rollID+"&bid="+bid+"&result="+rollResult+"&winAmount="+winAmount+"&multiplier="+multiplier));			}			else			{				finishWinConfirmation();			}		}		private function display(s:String)		{			var t:TextField = new TextField();			var tf:TextFormat = new TextFormat("Bangla", 72, 0xFFFFFF, true, null, null, null, null, TextFormatAlign.CENTER);			t.selectable = false;			t.text = s;			t.setTextFormat(tf);			t.filters = [new GlowFilter(0x0000FF,1.0,12.0,12.0,2,1,false,false)];						// 200, 280			addChild(t);			t.x = 50;			t.y = 220;			t.width = 620;						motion.createMove(t,50,0,3000);			motion.createFadeOut(t,3000,null,0,true);		}		private function onWinConfirmation(e:Event)		{						net.removeEventListener(Event.COMPLETE, onWinConfirmation);						var error:String = Game.ParseXML(net.data,"error");			if (error != null && error.length > 0)			{				MessageBox.Okay(error);				finishWinConfirmation();			}						var win:int = int(Game.ParseXML(net.data,"coins"));			Game.SetVirtualCoins(win);						var numCoins = (winAmount/bid)*2;			if (numCoins > 20) numCoins = 20;						var curX:int = 0;						for (var n:int = 0; n < numCoins; n++)			{				var coin:MovieClip = Game.GetMovieClip("Coin");				addChild(coin);								coin.x = bidPlate.x + 112 + curX;				coin.y = bidPlate.y + 126;				curX += 2;								motion.createMove(coin,586,12,500,playCoinSound,n*100,true);			}						finishWinConfirmation();		}		private function playCoinSound(e:Event=null)		{			if (Game.IsSoundEnabled())			{				// TODO: Play sound!!			}		}		private function finishWinConfirmation()		{			var minigame:int = int(Game.ParseXML(net.data,"minigame"));			if (minigame == 1)			{				Game.Message("Loading profiles for minigame...");								minigamePanel = new MinigameSelector(bid, onMinigameClose);				addChild(minigamePanel);								minigamePanel.x = 800;				motion.createMove(minigamePanel, 0, 0, 1000);			}			else enableButtons();		}		private function onMinigameClose()		{			enableButtons();						removeChild(minigamePanel);		}				private function onCheckWin(e:Event) { checkWin(); }								private function disableButtons()		{			backBtn.Disable();			reset.Disable();			minus1.Disable();			minus5.Disable();			minus10.Disable();			minus25.Disable();			plus1.Disable();			plus5.Disable();			plus10.Disable();			plus25.Disable();			playBtn.Disable();			for (var n:int = 0; n < paylines.length; n++) paylines[n].enabled = false;		}		private function enableButtons()		{			backBtn.Enable();			reset.Enable();			minus1.Enable();			minus5.Enable();			minus10.Enable();			minus25.Enable();			plus1.Enable();			plus5.Enable();			plus10.Enable();			plus25.Enable();			playBtn.Enable();			for (var n:int = 0; n < paylines.length; n++) paylines[n].enabled = true;		}				private function onReset() { setBid(1); }		private function onMinus1() { setBid(bid-1); }		private function onMinus5() { setBid(bid-5); }		private function onMinus10() { setBid(bid-10); }		private function onMinus25() { setBid(bid-25); }		private function onPlus1() { setBid(bid+1); }		private function onPlus5() { setBid(bid+5); }		private function onPlus10() { setBid(bid+10); }		private function onPlus25() { setBid(bid+25); }		private function setBid(n:int)		{			bid = n;			if (bid < 10) bid = 10;			if (bid > 100) bid = 100;			if (bid > Game.GetVirtualCoins()) 			{				if (Game.GetVirtualCoins() == 0)				{					//TODO: Message box that says you're out of currency ...				}				else bid = Game.GetVirtualCoins();			}			bidText.text = String(bid);			bidText.setTextFormat(bidTextFormat);		}	}	}