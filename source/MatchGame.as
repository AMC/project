package  {	import flash.events.Event;	import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFormatAlign;	import flash.events.MouseEvent;	import flash.filters.GlowFilter;	import flash.utils.Timer;	import flash.events.TimerEvent;		public class MatchGame extends Minigame	{		private var profileIndexes:Array;		private var cards:Array;				private var motion:MotionEngine;				private var callback:Function;				private var isLoadDone:Boolean = false;				private var bg:MovieClip;		private var bid:int;		private var bidText:TextField;		private var bidTextTF:TextFormat;				private var bidMsgText:TextField;		private var bidMsgTextTF:TextFormat;				private var numFlipped:int = 0;		private var first:Card;		private var second:Card;		private var numWon:int = 0;				private var objOver:Card;				// "MatchStopper"				public function MatchGame(bid:int, onCloseCallback:Function) 		{			this.bid = bid;			callback = onCloseCallback;			motion = new MotionEngine();						profileIndexes = new Array();			cards = new Array();						bg = Game.GetMovieClip("MinigameBackground");			bidText = new TextField();			bidTextTF = new TextFormat("Impact", 48, 0xFFFFFF, null, null, null, null, null, TextFormatAlign.CENTER);			bidText.text = bid + "";			bidText.setTextFormat(bidTextTF);						bidMsgText = new TextField();			bidMsgTextTF = new TextFormat("Impact", 32, 0xFFFFFF, null, null, null, null, null, TextFormatAlign.CENTER);			bidMsgText.text = "Current Bid";			bidMsgText.setTextFormat(bidMsgTextTF);						this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onAddedToStage(e:Event)		{			this.removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);						addChild(bg);			addChild(bidText);			addChild(bidMsgText);						bidText.x = 61;		bidText.y = 16;		bidText.width = 280;	bidText.height = 54;			bidMsgText.x = 61;	bidMsgText.y = -20;	bidMsgText.width = 280;	bidMsgText.height = 48;						loadNewProfiles();		}				private function loadNewProfiles()		{			isLoadDone = false;						profileIndexes = [];						for (var n:int = 0; n < 7; n++)			{				var found:Boolean = false;				var pI:int = int(Math.random()*(Game.Profiles.length-1));								for (var t:int = 0; t < profileIndexes.length; t++)					if (profileIndexes[t] == pI)						found = true;										if (!found)					profileIndexes[n] = pI;				else n--;			}						for (n = 0; n < profileIndexes.length; n++)			{				Game.Profiles.Get(profileIndexes[n]).LoadProfile();			}						var timer:Timer = new Timer(0,0);			timer.addEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);			timer.start();		}		private function onCheckForProfilesLoaded(e:Event)		{			var b:Boolean = true;						for (var n:int = 0; n < profileIndexes.length; n++)			{				var profile:ProfileNode = Game.Profiles.Get(profileIndexes[n]);				if (profile.isLoaded == false) b = false;			}			if (b)			{				e.target.stop();				e.target.removeEventListener(TimerEvent.TIMER, onCheckForProfilesLoaded);				//e.target = null;								cards = [];							for (n = 0; n < 7; n++)				{					var c1:Card = new Card(Game.Profiles.Get(profileIndexes[n]));					var c2:Card = new Card(Game.Profiles.Get(profileIndexes[n]));										cards[n] = c1;					cards[n+7] = c2;				}				var s1:Card = new Card();				var s2:Card = new Card();				s1.setAsStopper();				s2.setAsStopper();								cards[14] = s1;								cards = arrayShuffle(cards);								DisplayCards();			}		}		private function DisplayCards()		{			for (var n = 0; n < 15; n++)			{				var c:Card = cards[n] as Card;								addChild(c);								c.x = 800; c.y = 800;								c.addEventListener(MouseEvent.ROLL_OVER, onOver);				c.addEventListener(MouseEvent.ROLL_OUT, onOut);				c.addEventListener(MouseEvent.CLICK, onClick);			}			motion.createMove(cards[0], 141, 176, 1000, null, 0);			motion.createMove(cards[1], 237, 169, 1000, null, 100);			motion.createMove(cards[2], 355, 149, 1000, null, 200);			motion.createMove(cards[3], 484, 102, 1000, null, 300);			motion.createMove(cards[4], 627, 82, 1000, null, 400);			motion.createMove(cards[5], 141, 306, 1000, null, 500);			motion.createMove(cards[6], 237, 299, 1000, null, 600);			motion.createMove(cards[7], 355, 282, 1000, null, 700);			motion.createMove(cards[8], 484, 268, 1000, null, 800);			motion.createMove(cards[9], 627, 250, 1000, null, 900);			motion.createMove(cards[10], 141, 466, 1000, null, 1000);			motion.createMove(cards[11], 237, 450, 1000, null, 1100);			motion.createMove(cards[12], 355, 435, 1000, null, 1200);			motion.createMove(cards[13], 484, 420, 1000, null, 1300);			motion.createMove(cards[14], 627, 400, 1000, null, 1400);		}		private function onOver(e:MouseEvent)		{			var c:Card = e.target as Card;			objOver = e.target as Card;			c.filters = [new GlowFilter(0xFFFFFF)];		}		private function onOut(e:MouseEvent)		{			var c:Card = e.target as Card;			objOver = null;			c.filters = [];		}		private function onClick(e:MouseEvent)		{			if (numFlipped >= 2) return;						var c:Card = objOver;						if (c.isFlipped) return;						if (numFlipped == 0) first = c;			if (numFlipped == 1) second = c;						numFlipped++;						motion.createFlip(c, 200, checkFlip);						objOver = null;		}		private function checkFlip()		{			if (numFlipped == 1)			{				if (first.ID == "Stopper")				{					numFlipped = 2;					motion.createBlink(first, 2000, 333, 0xFFFFFF, onClose);				}				return;			}			if (second.ID == "Stopper")			{				numFlipped = 2;				motion.createBlink(second, 2000, 333, 0xFFFFFF, onClose);				return;			}			if (first.ID == second.ID)			{				motion.createBlink(first, 2000);				motion.createBlink(second, 2000);								numFlipped = 0;				numWon++;				display(((numWon/**numWon*/)*bid)+" coins won!");								if (numWon == 7)				{					numFlipped = 2;					var t:Timer = new Timer(2000,0);					t.addEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);					t.start();				}			}			else			{				motion.createFlip(first, 200, null, 500);				motion.createFlip(second, 200, onHide, 500);			}		}		private function onHide()		{			numFlipped = 0;		}		private function onTimerComplete(e:TimerEvent)		{			var t:Timer = e.target as Timer;			t.removeEventListener(TimerEvent.TIMER_COMPLETE, onTimerComplete);			onClose();		}		private function onClose()		{			callback();		}		private function display(s:String)		{			var t:TextField = new TextField();			var tf:TextFormat = new TextFormat("Bangla", 72, 0xFFFFFF, true, null, null, null, null, TextFormatAlign.CENTER);			t.selectable = false;			t.text = s;			t.setTextFormat(tf);			t.filters = [new GlowFilter(0x0000FF,1.0,12.0,12.0,2,1,false,false)];						// 200, 280			addChild(t);			t.x = 50;			t.y = 220;			t.width = 620;						motion.createMove(t,50,0,3000);			motion.createFadeOut(t,3000,null,0,true);		}				private function arrayShuffle(array_arr:Array):Array		{		   for(var i:Number = 0; i < array_arr.length; i++){			  var randomNum_num = Math.floor(Math.random() * array_arr.length)			  var arrayIndex = array_arr[i];			  array_arr[i] = array_arr[randomNum_num];			  array_arr[randomNum_num] = arrayIndex;		   }		   return array_arr;		}	}	}